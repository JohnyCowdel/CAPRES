
capres.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000707c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007248  08007248  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08007248  08007248  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007248  08007248  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007248  08007248  00017248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000014  08007264  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  08007264  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001752c  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000370f  00000000  00000000  000375b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003acc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e9  00000000  00000000  0003c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fef  00000000  00000000  0003d3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b11e  00000000  00000000  00061398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd478  00000000  00000000  0007c4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ccc  00000000  00000000  00159930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0015f5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080071f0 	.word	0x080071f0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000018 	.word	0x20000018
 80001c8:	080071f0 	.word	0x080071f0

080001cc <__aeabi_frsub>:
 80001cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001d0:	e002      	b.n	80001d8 <__addsf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_fsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001d8 <__addsf3>:
 80001d8:	0042      	lsls	r2, r0, #1
 80001da:	bf1f      	itttt	ne
 80001dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001e0:	ea92 0f03 	teqne	r2, r3
 80001e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001ec:	d06a      	beq.n	80002c4 <__addsf3+0xec>
 80001ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001f6:	bfc1      	itttt	gt
 80001f8:	18d2      	addgt	r2, r2, r3
 80001fa:	4041      	eorgt	r1, r0
 80001fc:	4048      	eorgt	r0, r1
 80001fe:	4041      	eorgt	r1, r0
 8000200:	bfb8      	it	lt
 8000202:	425b      	neglt	r3, r3
 8000204:	2b19      	cmp	r3, #25
 8000206:	bf88      	it	hi
 8000208:	4770      	bxhi	lr
 800020a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800020e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000212:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000216:	bf18      	it	ne
 8000218:	4240      	negne	r0, r0
 800021a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800021e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000222:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000226:	bf18      	it	ne
 8000228:	4249      	negne	r1, r1
 800022a:	ea92 0f03 	teq	r2, r3
 800022e:	d03f      	beq.n	80002b0 <__addsf3+0xd8>
 8000230:	f1a2 0201 	sub.w	r2, r2, #1
 8000234:	fa41 fc03 	asr.w	ip, r1, r3
 8000238:	eb10 000c 	adds.w	r0, r0, ip
 800023c:	f1c3 0320 	rsb	r3, r3, #32
 8000240:	fa01 f103 	lsl.w	r1, r1, r3
 8000244:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000248:	d502      	bpl.n	8000250 <__addsf3+0x78>
 800024a:	4249      	negs	r1, r1
 800024c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000250:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000254:	d313      	bcc.n	800027e <__addsf3+0xa6>
 8000256:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800025a:	d306      	bcc.n	800026a <__addsf3+0x92>
 800025c:	0840      	lsrs	r0, r0, #1
 800025e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000262:	f102 0201 	add.w	r2, r2, #1
 8000266:	2afe      	cmp	r2, #254	; 0xfe
 8000268:	d251      	bcs.n	800030e <__addsf3+0x136>
 800026a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800026e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000272:	bf08      	it	eq
 8000274:	f020 0001 	biceq.w	r0, r0, #1
 8000278:	ea40 0003 	orr.w	r0, r0, r3
 800027c:	4770      	bx	lr
 800027e:	0049      	lsls	r1, r1, #1
 8000280:	eb40 0000 	adc.w	r0, r0, r0
 8000284:	3a01      	subs	r2, #1
 8000286:	bf28      	it	cs
 8000288:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800028c:	d2ed      	bcs.n	800026a <__addsf3+0x92>
 800028e:	fab0 fc80 	clz	ip, r0
 8000292:	f1ac 0c08 	sub.w	ip, ip, #8
 8000296:	ebb2 020c 	subs.w	r2, r2, ip
 800029a:	fa00 f00c 	lsl.w	r0, r0, ip
 800029e:	bfaa      	itet	ge
 80002a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002a4:	4252      	neglt	r2, r2
 80002a6:	4318      	orrge	r0, r3
 80002a8:	bfbc      	itt	lt
 80002aa:	40d0      	lsrlt	r0, r2
 80002ac:	4318      	orrlt	r0, r3
 80002ae:	4770      	bx	lr
 80002b0:	f092 0f00 	teq	r2, #0
 80002b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002b8:	bf06      	itte	eq
 80002ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002be:	3201      	addeq	r2, #1
 80002c0:	3b01      	subne	r3, #1
 80002c2:	e7b5      	b.n	8000230 <__addsf3+0x58>
 80002c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002cc:	bf18      	it	ne
 80002ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d2:	d021      	beq.n	8000318 <__addsf3+0x140>
 80002d4:	ea92 0f03 	teq	r2, r3
 80002d8:	d004      	beq.n	80002e4 <__addsf3+0x10c>
 80002da:	f092 0f00 	teq	r2, #0
 80002de:	bf08      	it	eq
 80002e0:	4608      	moveq	r0, r1
 80002e2:	4770      	bx	lr
 80002e4:	ea90 0f01 	teq	r0, r1
 80002e8:	bf1c      	itt	ne
 80002ea:	2000      	movne	r0, #0
 80002ec:	4770      	bxne	lr
 80002ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002f2:	d104      	bne.n	80002fe <__addsf3+0x126>
 80002f4:	0040      	lsls	r0, r0, #1
 80002f6:	bf28      	it	cs
 80002f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002fc:	4770      	bx	lr
 80002fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000302:	bf3c      	itt	cc
 8000304:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000308:	4770      	bxcc	lr
 800030a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800030e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000312:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000316:	4770      	bx	lr
 8000318:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800031c:	bf16      	itet	ne
 800031e:	4608      	movne	r0, r1
 8000320:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000324:	4601      	movne	r1, r0
 8000326:	0242      	lsls	r2, r0, #9
 8000328:	bf06      	itte	eq
 800032a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800032e:	ea90 0f01 	teqeq	r0, r1
 8000332:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000336:	4770      	bx	lr

08000338 <__aeabi_ui2f>:
 8000338:	f04f 0300 	mov.w	r3, #0
 800033c:	e004      	b.n	8000348 <__aeabi_i2f+0x8>
 800033e:	bf00      	nop

08000340 <__aeabi_i2f>:
 8000340:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000344:	bf48      	it	mi
 8000346:	4240      	negmi	r0, r0
 8000348:	ea5f 0c00 	movs.w	ip, r0
 800034c:	bf08      	it	eq
 800034e:	4770      	bxeq	lr
 8000350:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000354:	4601      	mov	r1, r0
 8000356:	f04f 0000 	mov.w	r0, #0
 800035a:	e01c      	b.n	8000396 <__aeabi_l2f+0x2a>

0800035c <__aeabi_ul2f>:
 800035c:	ea50 0201 	orrs.w	r2, r0, r1
 8000360:	bf08      	it	eq
 8000362:	4770      	bxeq	lr
 8000364:	f04f 0300 	mov.w	r3, #0
 8000368:	e00a      	b.n	8000380 <__aeabi_l2f+0x14>
 800036a:	bf00      	nop

0800036c <__aeabi_l2f>:
 800036c:	ea50 0201 	orrs.w	r2, r0, r1
 8000370:	bf08      	it	eq
 8000372:	4770      	bxeq	lr
 8000374:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000378:	d502      	bpl.n	8000380 <__aeabi_l2f+0x14>
 800037a:	4240      	negs	r0, r0
 800037c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000380:	ea5f 0c01 	movs.w	ip, r1
 8000384:	bf02      	ittt	eq
 8000386:	4684      	moveq	ip, r0
 8000388:	4601      	moveq	r1, r0
 800038a:	2000      	moveq	r0, #0
 800038c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000390:	bf08      	it	eq
 8000392:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000396:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800039a:	fabc f28c 	clz	r2, ip
 800039e:	3a08      	subs	r2, #8
 80003a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003a4:	db10      	blt.n	80003c8 <__aeabi_l2f+0x5c>
 80003a6:	fa01 fc02 	lsl.w	ip, r1, r2
 80003aa:	4463      	add	r3, ip
 80003ac:	fa00 fc02 	lsl.w	ip, r0, r2
 80003b0:	f1c2 0220 	rsb	r2, r2, #32
 80003b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b8:	fa20 f202 	lsr.w	r2, r0, r2
 80003bc:	eb43 0002 	adc.w	r0, r3, r2
 80003c0:	bf08      	it	eq
 80003c2:	f020 0001 	biceq.w	r0, r0, #1
 80003c6:	4770      	bx	lr
 80003c8:	f102 0220 	add.w	r2, r2, #32
 80003cc:	fa01 fc02 	lsl.w	ip, r1, r2
 80003d0:	f1c2 0220 	rsb	r2, r2, #32
 80003d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d8:	fa21 f202 	lsr.w	r2, r1, r2
 80003dc:	eb43 0002 	adc.w	r0, r3, r2
 80003e0:	bf08      	it	eq
 80003e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003e6:	4770      	bx	lr

080003e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ee:	463b      	mov	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
 80003fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003fe:	4b30      	ldr	r3, [pc, #192]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000400:	4a30      	ldr	r2, [pc, #192]	; (80004c4 <MX_ADC1_Init+0xdc>)
 8000402:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000404:	4b2e      	ldr	r3, [pc, #184]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000406:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800040a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040c:	4b2c      	ldr	r3, [pc, #176]	; (80004c0 <MX_ADC1_Init+0xd8>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000412:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000414:	2220      	movs	r2, #32
 8000416:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000418:	4b29      	ldr	r3, [pc, #164]	; (80004c0 <MX_ADC1_Init+0xd8>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800041e:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000420:	2204      	movs	r2, #4
 8000422:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000424:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000426:	2200      	movs	r2, #0
 8000428:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800042a:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <MX_ADC1_Init+0xd8>)
 800042c:	2201      	movs	r2, #1
 800042e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000430:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000432:	2201      	movs	r2, #1
 8000434:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000436:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000438:	2200      	movs	r2, #0
 800043a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 800043e:	4b20      	ldr	r3, [pc, #128]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000440:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000444:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000446:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800044c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800044e:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000450:	2200      	movs	r2, #0
 8000452:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000458:	2200      	movs	r2, #0
 800045a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800045c:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <MX_ADC1_Init+0xd8>)
 800045e:	2201      	movs	r2, #1
 8000460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000464:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000466:	220c      	movs	r2, #12
 8000468:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_ADC1_Init+0xd8>)
 800046c:	2280      	movs	r2, #128	; 0x80
 800046e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000472:	2200      	movs	r2, #0
 8000474:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <MX_ADC1_Init+0xd8>)
 8000478:	2201      	movs	r2, #1
 800047a:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800047c:	4810      	ldr	r0, [pc, #64]	; (80004c0 <MX_ADC1_Init+0xd8>)
 800047e:	f001 f9f3 	bl	8001868 <HAL_ADC_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8000488:	f000 fc25 	bl	8000cd6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800048c:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_ADC1_Init+0xe0>)
 800048e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000490:	2306      	movs	r3, #6
 8000492:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000494:	2300      	movs	r3, #0
 8000496:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000498:	237f      	movs	r3, #127	; 0x7f
 800049a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800049c:	2304      	movs	r3, #4
 800049e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a4:	463b      	mov	r3, r7
 80004a6:	4619      	mov	r1, r3
 80004a8:	4805      	ldr	r0, [pc, #20]	; (80004c0 <MX_ADC1_Init+0xd8>)
 80004aa:	f001 fd7f 	bl	8001fac <HAL_ADC_ConfigChannel>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80004b4:	f000 fc0f 	bl	8000cd6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b8:	bf00      	nop
 80004ba:	3718      	adds	r7, #24
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000030 	.word	0x20000030
 80004c4:	50040000 	.word	0x50040000
 80004c8:	32601000 	.word	0x32601000

080004cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b0a0      	sub	sp, #128	; 0x80
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	225c      	movs	r2, #92	; 0x5c
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f006 fe53 	bl	8007198 <memset>
  if(adcHandle->Instance==ADC1)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a3f      	ldr	r2, [pc, #252]	; (80005f4 <HAL_ADC_MspInit+0x128>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d177      	bne.n	80005ec <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000500:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000502:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000506:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000508:	2302      	movs	r3, #2
 800050a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800050c:	2301      	movs	r3, #1
 800050e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000510:	2308      	movs	r3, #8
 8000512:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000514:	2307      	movs	r3, #7
 8000516:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000518:	2302      	movs	r3, #2
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800051c:	2302      	movs	r3, #2
 800051e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000524:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	4618      	mov	r0, r3
 800052c:	f005 fa6c 	bl	8005a08 <HAL_RCCEx_PeriphCLKConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000536:	f000 fbce 	bl	8000cd6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800053a:	4b2f      	ldr	r3, [pc, #188]	; (80005f8 <HAL_ADC_MspInit+0x12c>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	4a2e      	ldr	r2, [pc, #184]	; (80005f8 <HAL_ADC_MspInit+0x12c>)
 8000540:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000546:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <HAL_ADC_MspInit+0x12c>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <HAL_ADC_MspInit+0x12c>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	4a28      	ldr	r2, [pc, #160]	; (80005f8 <HAL_ADC_MspInit+0x12c>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055e:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <HAL_ADC_MspInit+0x12c>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800056e:	230b      	movs	r3, #11
 8000570:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800057a:	4619      	mov	r1, r3
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f003 f850 	bl	8003624 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000584:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <HAL_ADC_MspInit+0x130>)
 8000586:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <HAL_ADC_MspInit+0x134>)
 8000588:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <HAL_ADC_MspInit+0x130>)
 800058c:	2200      	movs	r2, #0
 800058e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000590:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <HAL_ADC_MspInit+0x130>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <HAL_ADC_MspInit+0x130>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_ADC_MspInit+0x130>)
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <HAL_ADC_MspInit+0x130>)
 80005a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_ADC_MspInit+0x130>)
 80005ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_ADC_MspInit+0x130>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <HAL_ADC_MspInit+0x130>)
 80005ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005c0:	480e      	ldr	r0, [pc, #56]	; (80005fc <HAL_ADC_MspInit+0x130>)
 80005c2:	f002 fde9 	bl	8003198 <HAL_DMA_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 80005cc:	f000 fb83 	bl	8000cd6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <HAL_ADC_MspInit+0x130>)
 80005d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <HAL_ADC_MspInit+0x130>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2012      	movs	r0, #18
 80005e2:	f002 fbe8 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80005e6:	2012      	movs	r0, #18
 80005e8:	f002 fc01 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ec:	bf00      	nop
 80005ee:	3780      	adds	r7, #128	; 0x80
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	50040000 	.word	0x50040000
 80005f8:	40021000 	.word	0x40021000
 80005fc:	20000094 	.word	0x20000094
 8000600:	40020008 	.word	0x40020008

08000604 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_CAN1_Init+0x64>)
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <MX_CAN1_Init+0x68>)
 800060c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_CAN1_Init+0x64>)
 8000610:	2210      	movs	r2, #16
 8000612:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_CAN1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_CAN1_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_CAN1_Init+0x64>)
 8000622:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000626:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_CAN1_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_CAN1_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_CAN1_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_CAN1_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_CAN1_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_CAN1_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_CAN1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_CAN1_Init+0x64>)
 8000654:	f002 f9d8 	bl	8002a08 <HAL_CAN_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800065e:	f000 fb3a 	bl	8000cd6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000dc 	.word	0x200000dc
 800066c:	40006400 	.word	0x40006400

08000670 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <HAL_CAN_MspInit+0x80>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d129      	bne.n	80006e6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_CAN_MspInit+0x84>)
 8000694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <HAL_CAN_MspInit+0x84>)
 8000698:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800069c:	6593      	str	r3, [r2, #88]	; 0x58
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_CAN_MspInit+0x84>)
 80006a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_CAN_MspInit+0x84>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <HAL_CAN_MspInit+0x84>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_CAN_MspInit+0x84>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006d4:	2309      	movs	r3, #9
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f002 ff9f 	bl	8003624 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40006400 	.word	0x40006400
 80006f4:	40021000 	.word	0x40021000

080006f8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2224      	movs	r2, #36	; 0x24
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f006 fd47 	bl	8007198 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_DAC1_Init+0x5c>)
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_DAC1_Init+0x60>)
 800070e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000710:	4810      	ldr	r0, [pc, #64]	; (8000754 <MX_DAC1_Init+0x5c>)
 8000712:	f002 fb86 	bl	8002e22 <HAL_DAC_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800071c:	f000 fadb 	bl	8000cd6 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2210      	movs	r2, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <MX_DAC1_Init+0x5c>)
 800073c:	f002 fc05 	bl	8002f4a <HAL_DAC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 fac6 	bl	8000cd6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3728      	adds	r7, #40	; 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000104 	.word	0x20000104
 8000758:	40007400 	.word	0x40007400

0800075c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <HAL_DAC_MspInit+0x74>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d124      	bne.n	80007c8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_DAC_MspInit+0x78>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <HAL_DAC_MspInit+0x78>)
 8000784:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000788:	6593      	str	r3, [r2, #88]	; 0x58
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_DAC_MspInit+0x78>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_DAC_MspInit+0x78>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_DAC_MspInit+0x78>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_DAC_MspInit+0x78>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ae:	2320      	movs	r3, #32
 80007b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b2:	2303      	movs	r3, #3
 80007b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f002 ff2e 	bl	8003624 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40007400 	.word	0x40007400
 80007d4:	40021000 	.word	0x40021000

080007d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_DMA_Init+0x48>)
 80007e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <MX_DMA_Init+0x48>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6493      	str	r3, [r2, #72]	; 0x48
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_DMA_Init+0x48>)
 80007ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	200b      	movs	r0, #11
 80007fc:	f002 fadb 	bl	8002db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000800:	200b      	movs	r0, #11
 8000802:	f002 faf4 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2010      	movs	r0, #16
 800080c:	f002 fad3 	bl	8002db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000810:	2010      	movs	r0, #16
 8000812:	f002 faec 	bl	8002dee <HAL_NVIC_EnableIRQ>

}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_GPIO_Init+0x7c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <MX_GPIO_Init+0x7c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_GPIO_Init+0x7c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_GPIO_Init+0x7c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_GPIO_Init+0x7c>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_GPIO_Init+0x7c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f003 f850 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f002 fec6 	bl	8003624 <HAL_GPIO_Init>

}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000

080008a4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_I2C1_Init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <MX_I2C1_Init+0x78>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_I2C1_Init+0x74>)
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <MX_I2C1_Init+0x7c>)
 80008b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_I2C1_Init+0x74>)
 80008bc:	2201      	movs	r2, #1
 80008be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_I2C1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_I2C1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <MX_I2C1_Init+0x74>)
 80008e0:	f003 f84c 	bl	800397c <HAL_I2C_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ea:	f000 f9f4 	bl	8000cd6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <MX_I2C1_Init+0x74>)
 80008f2:	f004 f98d 	bl	8004c10 <HAL_I2CEx_ConfigAnalogFilter>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008fc:	f000 f9eb 	bl	8000cd6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_I2C1_Init+0x74>)
 8000904:	f004 f9cf 	bl	8004ca6 <HAL_I2CEx_ConfigDigitalFilter>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800090e:	f000 f9e2 	bl	8000cd6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000118 	.word	0x20000118
 800091c:	40005400 	.word	0x40005400
 8000920:	10909cec 	.word	0x10909cec

08000924 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b0a0      	sub	sp, #128	; 0x80
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	225c      	movs	r2, #92	; 0x5c
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f006 fc27 	bl	8007198 <memset>
  if(i2cHandle->Instance==I2C1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a43      	ldr	r2, [pc, #268]	; (8000a5c <HAL_I2C_MspInit+0x138>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d17e      	bne.n	8000a52 <HAL_I2C_MspInit+0x12e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000954:	2340      	movs	r3, #64	; 0x40
 8000956:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000958:	2300      	movs	r3, #0
 800095a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4618      	mov	r0, r3
 8000962:	f005 f851 	bl	8005a08 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800096c:	f000 f9b3 	bl	8000cd6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <HAL_I2C_MspInit+0x13c>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	4a3a      	ldr	r2, [pc, #232]	; (8000a60 <HAL_I2C_MspInit+0x13c>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097c:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <HAL_I2C_MspInit+0x13c>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000988:	2340      	movs	r3, #64	; 0x40
 800098a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098c:	2312      	movs	r3, #18
 800098e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000990:	2301      	movs	r3, #1
 8000992:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000998:	2304      	movs	r3, #4
 800099a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009a0:	4619      	mov	r1, r3
 80009a2:	4830      	ldr	r0, [pc, #192]	; (8000a64 <HAL_I2C_MspInit+0x140>)
 80009a4:	f002 fe3e 	bl	8003624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ac:	2312      	movs	r3, #18
 80009ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b8:	2304      	movs	r3, #4
 80009ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009c0:	4619      	mov	r1, r3
 80009c2:	4828      	ldr	r0, [pc, #160]	; (8000a64 <HAL_I2C_MspInit+0x140>)
 80009c4:	f002 fe2e 	bl	8003624 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <HAL_I2C_MspInit+0x13c>)
 80009ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009cc:	4a24      	ldr	r2, [pc, #144]	; (8000a60 <HAL_I2C_MspInit+0x13c>)
 80009ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d2:	6593      	str	r3, [r2, #88]	; 0x58
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <HAL_I2C_MspInit+0x13c>)
 80009d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80009e0:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <HAL_I2C_MspInit+0x144>)
 80009e2:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <HAL_I2C_MspInit+0x148>)
 80009e4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <HAL_I2C_MspInit+0x144>)
 80009e8:	2203      	movs	r2, #3
 80009ea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <HAL_I2C_MspInit+0x144>)
 80009ee:	2210      	movs	r2, #16
 80009f0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_I2C_MspInit+0x144>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <HAL_I2C_MspInit+0x144>)
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_I2C_MspInit+0x144>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_I2C_MspInit+0x144>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_I2C_MspInit+0x144>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_I2C_MspInit+0x144>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000a16:	4814      	ldr	r0, [pc, #80]	; (8000a68 <HAL_I2C_MspInit+0x144>)
 8000a18:	f002 fbbe 	bl	8003198 <HAL_DMA_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_I2C_MspInit+0x102>
    {
      Error_Handler();
 8000a22:	f000 f958 	bl	8000cd6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_I2C_MspInit+0x144>)
 8000a2a:	639a      	str	r2, [r3, #56]	; 0x38
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_I2C_MspInit+0x144>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	201f      	movs	r0, #31
 8000a38:	f002 f9bd 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a3c:	201f      	movs	r0, #31
 8000a3e:	f002 f9d6 	bl	8002dee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2020      	movs	r0, #32
 8000a48:	f002 f9b5 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a4c:	2020      	movs	r0, #32
 8000a4e:	f002 f9ce 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a52:	bf00      	nop
 8000a54:	3780      	adds	r7, #128	; 0x80
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48000400 	.word	0x48000400
 8000a68:	2000016c 	.word	0x2000016c
 8000a6c:	4002006c 	.word	0x4002006c

08000a70 <calculateAngle>:

}


float calculateAngle(uint32_t *arr, uint32_t length)
{
 8000a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a74:	ed2d 8b02 	vpush	{d8}
 8000a78:	b08a      	sub	sp, #40	; 0x28
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
	uint64_t moment = 0;
 8000a80:	f04f 0200 	mov.w	r2, #0
 8000a84:	f04f 0300 	mov.w	r3, #0
 8000a88:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint64_t mass = 0;
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	e9c7 2306 	strd	r2, r3, [r7, #24]
	float angle;

	for(uint32_t i = 0;i< length;i++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	e029      	b.n	8000af2 <calculateAngle+0x82>
	{
		moment += arr[i]*i;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	fb02 f303 	mul.w	r3, r2, r3
 8000aae:	2200      	movs	r2, #0
 8000ab0:	461c      	mov	r4, r3
 8000ab2:	4615      	mov	r5, r2
 8000ab4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ab8:	eb12 0a04 	adds.w	sl, r2, r4
 8000abc:	eb43 0b05 	adc.w	fp, r3, r5
 8000ac0:	e9c7 ab08 	strd	sl, fp, [r7, #32]
		mass += arr[i];
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4698      	mov	r8, r3
 8000ad2:	4691      	mov	r9, r2
 8000ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ad8:	eb12 0108 	adds.w	r1, r2, r8
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	eb43 0309 	adc.w	r3, r3, r9
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ae8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for(uint32_t i = 0;i< length;i++)
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	3301      	adds	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d3d1      	bcc.n	8000a9e <calculateAngle+0x2e>
	}
	angle = ((float)moment) / ((float) mass);
 8000afa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000afe:	f7ff fc2d 	bl	800035c <__aeabi_ul2f>
 8000b02:	ee08 0a10 	vmov	s16, r0
 8000b06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b0a:	f7ff fc27 	bl	800035c <__aeabi_ul2f>
 8000b0e:	ee07 0a10 	vmov	s14, r0
 8000b12:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000b16:	edc7 7a04 	vstr	s15, [r7, #16]

	return angle;
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	ee07 3a90 	vmov	s15, r3

}
 8000b20:	eeb0 0a67 	vmov.f32	s0, s15
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	ecbd 8b02 	vpop	{d8}
 8000b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b36:	f000 fc24 	bl	8001382 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3a:	f000 f87b 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3e:	f7ff fe71 	bl	8000824 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b42:	f7ff fe49 	bl	80007d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b46:	f7ff fc4f 	bl	80003e8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000b4a:	f7ff fd5b 	bl	8000604 <MX_CAN1_Init>
  MX_DAC1_Init();
 8000b4e:	f7ff fdd3 	bl	80006f8 <MX_DAC1_Init>
  MX_I2C1_Init();
 8000b52:	f7ff fea7 	bl	80008a4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000b56:	f000 f95b 	bl	8000e10 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b5a:	f000 fa07 	bl	8000f6c <MX_TIM2_Init>
  MX_TIM15_Init();
 8000b5e:	f000 fa5d 	bl	800101c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, analogValues, 256);
 8000b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b66:	4927      	ldr	r1, [pc, #156]	; (8000c04 <main+0xd4>)
 8000b68:	4827      	ldr	r0, [pc, #156]	; (8000c08 <main+0xd8>)
 8000b6a:	f000 ffbf 	bl	8001aec <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4826      	ldr	r0, [pc, #152]	; (8000c0c <main+0xdc>)
 8000b72:	f005 fb01 	bl	8006178 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b76:	2100      	movs	r1, #0
 8000b78:	4825      	ldr	r0, [pc, #148]	; (8000c10 <main+0xe0>)
 8000b7a:	f005 fafd 	bl	8006178 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000b7e:	2104      	movs	r1, #4
 8000b80:	4824      	ldr	r0, [pc, #144]	; (8000c14 <main+0xe4>)
 8000b82:	f005 faf9 	bl	8006178 <HAL_TIM_PWM_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000b86:	2110      	movs	r1, #16
 8000b88:	4823      	ldr	r0, [pc, #140]	; (8000c18 <main+0xe8>)
 8000b8a:	f002 f96c 	bl	8002e66 <HAL_DAC_Start>

  transmitted = HAL_I2C_Master_Transmit(&hi2c1, address<<1, i2cData, 2,100);
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <main+0xec>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	b299      	uxth	r1, r3
 8000b98:	2364      	movs	r3, #100	; 0x64
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <main+0xf0>)
 8000ba0:	4820      	ldr	r0, [pc, #128]	; (8000c24 <main+0xf4>)
 8000ba2:	f002 ff87 	bl	8003ab4 <HAL_I2C_Master_Transmit>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <main+0xf8>)
 8000bac:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  transmitted = HAL_I2C_Master_Transmit(&hi2c1, address<<1, i2cData, 2,100);
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <main+0xec>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	b299      	uxth	r1, r3
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <main+0xf0>)
 8000bc0:	4818      	ldr	r0, [pc, #96]	; (8000c24 <main+0xf4>)
 8000bc2:	f002 ff77 	bl	8003ab4 <HAL_I2C_Master_Transmit>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <main+0xf8>)
 8000bcc:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(10);
 8000bce:	200a      	movs	r0, #10
 8000bd0:	f000 fc4c 	bl	800146c <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, analogValues, 256);
 8000bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd8:	490a      	ldr	r1, [pc, #40]	; (8000c04 <main+0xd4>)
 8000bda:	480b      	ldr	r0, [pc, #44]	; (8000c08 <main+0xd8>)
 8000bdc:	f000 ff86 	bl	8001aec <HAL_ADC_Start_DMA>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac);
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <main+0xfc>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2200      	movs	r2, #0
 8000be6:	2110      	movs	r1, #16
 8000be8:	480b      	ldr	r0, [pc, #44]	; (8000c18 <main+0xe8>)
 8000bea:	f002 f989 	bl	8002f00 <HAL_DAC_SetValue>
	  result = calculateAngle(analogValues, 256);
 8000bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <main+0xd4>)
 8000bf4:	f7ff ff3c 	bl	8000a70 <calculateAngle>
 8000bf8:	eef0 7a40 	vmov.f32	s15, s0
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <main+0x100>)
 8000bfe:	edc3 7a00 	vstr	s15, [r3]
	  transmitted = HAL_I2C_Master_Transmit(&hi2c1, address<<1, i2cData, 2,100);
 8000c02:	e7d4      	b.n	8000bae <main+0x7e>
 8000c04:	200001b4 	.word	0x200001b4
 8000c08:	20000030 	.word	0x20000030
 8000c0c:	20000608 	.word	0x20000608
 8000c10:	200005bc 	.word	0x200005bc
 8000c14:	20000654 	.word	0x20000654
 8000c18:	20000104 	.word	0x20000104
 8000c1c:	20000006 	.word	0x20000006
 8000c20:	20000004 	.word	0x20000004
 8000c24:	20000118 	.word	0x20000118
 8000c28:	200005b4 	.word	0x200005b4
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	200005b8 	.word	0x200005b8

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b096      	sub	sp, #88	; 0x58
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2244      	movs	r2, #68	; 0x44
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f006 faa8 	bl	8007198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c5a:	f004 f87f 	bl	8004d5c <HAL_PWREx_ControlVoltageScaling>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c64:	f000 f837 	bl	8000cd6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c72:	2310      	movs	r3, #16
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c76:	2302      	movs	r3, #2
 8000c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c82:	230a      	movs	r3, #10
 8000c84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c86:	2307      	movs	r3, #7
 8000c88:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4618      	mov	r0, r3
 8000c98:	f004 f8b6 	bl	8004e08 <HAL_RCC_OscConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ca2:	f000 f818 	bl	8000cd6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	2303      	movs	r3, #3
 8000cac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2104      	movs	r1, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 fcb6 	bl	8005630 <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cca:	f000 f804 	bl	8000cd6 <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3758      	adds	r7, #88	; 0x58
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cda:	b672      	cpsid	i
}
 8000cdc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cde:	e7fe      	b.n	8000cde <Error_Handler+0x8>

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_MspInit+0x44>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x44>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 fb5a 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f002 fdde 	bl	8003948 <HAL_GPIO_TogglePin>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <DMA1_Channel1_IRQHandler+0x1c>)
 8000d8e:	f002 fb5c 	bl	800344a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000094 	.word	0x20000094

08000d9c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <DMA1_Channel6_IRQHandler+0x10>)
 8000da2:	f002 fb52 	bl	800344a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000016c 	.word	0x2000016c

08000db0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <ADC1_IRQHandler+0x10>)
 8000db6:	f000 ff1d 	bl	8001bf4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000030 	.word	0x20000030

08000dc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <I2C1_EV_IRQHandler+0x10>)
 8000dca:	f002 ff8b 	bl	8003ce4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000118 	.word	0x20000118

08000dd8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <I2C1_ER_IRQHandler+0x10>)
 8000dde:	f002 ff9b 	bl	8003d18 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000118 	.word	0x20000118

08000dec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09a      	sub	sp, #104	; 0x68
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]
 8000e42:	615a      	str	r2, [r3, #20]
 8000e44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	222c      	movs	r2, #44	; 0x2c
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f006 f9a3 	bl	8007198 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e52:	4b44      	ldr	r3, [pc, #272]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000e54:	4a44      	ldr	r2, [pc, #272]	; (8000f68 <MX_TIM1_Init+0x158>)
 8000e56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e58:	4b42      	ldr	r3, [pc, #264]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8000e64:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000e66:	2209      	movs	r2, #9
 8000e68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	4b3e      	ldr	r3, [pc, #248]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e70:	4b3c      	ldr	r3, [pc, #240]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e7c:	4839      	ldr	r0, [pc, #228]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000e7e:	f005 f8cd 	bl	800601c <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e88:	f7ff ff25 	bl	8000cd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e8c:	4835      	ldr	r0, [pc, #212]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000e8e:	f005 f91c 	bl	80060ca <HAL_TIM_PWM_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000e98:	f7ff ff1d 	bl	8000cd6 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ea4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	482e      	ldr	r0, [pc, #184]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000eac:	f005 fc1f 	bl	80066ee <HAL_TIM_SlaveConfigSynchro>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000eb6:	f7ff ff0e 	bl	8000cd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8000eba:	2340      	movs	r3, #64	; 0x40
 8000ebc:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8000ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ec8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4825      	ldr	r0, [pc, #148]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000ed0:	f006 f884 	bl	8006fdc <HAL_TIMEx_MasterConfigSynchronization>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000eda:	f7ff fefc 	bl	8000cd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ede:	2360      	movs	r3, #96	; 0x60
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efe:	2200      	movs	r2, #0
 8000f00:	4619      	mov	r1, r3
 8000f02:	4818      	ldr	r0, [pc, #96]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000f04:	f005 fa16 	bl	8006334 <HAL_TIM_PWM_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000f0e:	f7ff fee2 	bl	8000cd6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f38:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000f48:	f006 f8ae 	bl	80070a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000f52:	f7ff fec0 	bl	8000cd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f56:	4803      	ldr	r0, [pc, #12]	; (8000f64 <MX_TIM1_Init+0x154>)
 8000f58:	f000 f96a 	bl	8001230 <HAL_TIM_MspPostInit>

}
 8000f5c:	bf00      	nop
 8000f5e:	3768      	adds	r7, #104	; 0x68
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200005bc 	.word	0x200005bc
 8000f68:	40012c00 	.word	0x40012c00

08000f6c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <MX_TIM2_Init+0xac>)
 8000f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <MX_TIM2_Init+0xac>)
 8000f9a:	2250      	movs	r2, #80	; 0x50
 8000f9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <MX_TIM2_Init+0xac>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <MX_TIM2_Init+0xac>)
 8000fa6:	223c      	movs	r2, #60	; 0x3c
 8000fa8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_TIM2_Init+0xac>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <MX_TIM2_Init+0xac>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fb6:	4818      	ldr	r0, [pc, #96]	; (8001018 <MX_TIM2_Init+0xac>)
 8000fb8:	f005 f887 	bl	80060ca <HAL_TIM_PWM_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000fc2:	f7ff fe88 	bl	8000cd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8000fc6:	2340      	movs	r3, #64	; 0x40
 8000fc8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4810      	ldr	r0, [pc, #64]	; (8001018 <MX_TIM2_Init+0xac>)
 8000fd6:	f006 f801 	bl	8006fdc <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000fe0:	f7ff fe79 	bl	8000cd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe4:	2360      	movs	r3, #96	; 0x60
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 8000fe8:	231e      	movs	r3, #30
 8000fea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4807      	ldr	r0, [pc, #28]	; (8001018 <MX_TIM2_Init+0xac>)
 8000ffc:	f005 f99a 	bl	8006334 <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001006:	f7ff fe66 	bl	8000cd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <MX_TIM2_Init+0xac>)
 800100c:	f000 f910 	bl	8001230 <HAL_TIM_MspPostInit>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000608 	.word	0x20000608

0800101c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b09e      	sub	sp, #120	; 0x78
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001030:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001060:	463b      	mov	r3, r7
 8001062:	222c      	movs	r2, #44	; 0x2c
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f006 f896 	bl	8007198 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800106c:	4b45      	ldr	r3, [pc, #276]	; (8001184 <MX_TIM15_Init+0x168>)
 800106e:	4a46      	ldr	r2, [pc, #280]	; (8001188 <MX_TIM15_Init+0x16c>)
 8001070:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001072:	4b44      	ldr	r3, [pc, #272]	; (8001184 <MX_TIM15_Init+0x168>)
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b42      	ldr	r3, [pc, #264]	; (8001184 <MX_TIM15_Init+0x168>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65000;
 800107e:	4b41      	ldr	r3, [pc, #260]	; (8001184 <MX_TIM15_Init+0x168>)
 8001080:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001084:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001086:	4b3f      	ldr	r3, [pc, #252]	; (8001184 <MX_TIM15_Init+0x168>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800108c:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <MX_TIM15_Init+0x168>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <MX_TIM15_Init+0x168>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001098:	483a      	ldr	r0, [pc, #232]	; (8001184 <MX_TIM15_Init+0x168>)
 800109a:	f004 ffbf 	bl	800601c <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80010a4:	f7ff fe17 	bl	8000cd6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ac:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80010ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010b2:	4619      	mov	r1, r3
 80010b4:	4833      	ldr	r0, [pc, #204]	; (8001184 <MX_TIM15_Init+0x168>)
 80010b6:	f005 fa51 	bl	800655c <HAL_TIM_ConfigClockSource>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80010c0:	f7ff fe09 	bl	8000cd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80010c4:	482f      	ldr	r0, [pc, #188]	; (8001184 <MX_TIM15_Init+0x168>)
 80010c6:	f005 f800 	bl	80060ca <HAL_TIM_PWM_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM15_Init+0xb8>
  {
    Error_Handler();
 80010d0:	f7ff fe01 	bl	8000cd6 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010d4:	2304      	movs	r3, #4
 80010d6:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80010d8:	2300      	movs	r3, #0
 80010da:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80010dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010e0:	4619      	mov	r1, r3
 80010e2:	4828      	ldr	r0, [pc, #160]	; (8001184 <MX_TIM15_Init+0x168>)
 80010e4:	f005 fb03 	bl	80066ee <HAL_TIM_SlaveConfigSynchro>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM15_Init+0xd6>
  {
    Error_Handler();
 80010ee:	f7ff fdf2 	bl	8000cd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010f2:	2320      	movs	r3, #32
 80010f4:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80010fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010fe:	4619      	mov	r1, r3
 8001100:	4820      	ldr	r0, [pc, #128]	; (8001184 <MX_TIM15_Init+0x168>)
 8001102:	f005 ff6b 	bl	8006fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 800110c:	f7ff fde3 	bl	8000cd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001110:	2360      	movs	r3, #96	; 0x60
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 36;
 8001114:	2324      	movs	r3, #36	; 0x24
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001118:	2300      	movs	r3, #0
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800111c:	2300      	movs	r3, #0
 800111e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800112c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001130:	2204      	movs	r2, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4813      	ldr	r0, [pc, #76]	; (8001184 <MX_TIM15_Init+0x168>)
 8001136:	f005 f8fd 	bl	8006334 <HAL_TIM_PWM_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM15_Init+0x128>
  {
    Error_Handler();
 8001140:	f7ff fdc9 	bl	8000cd6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <MX_TIM15_Init+0x168>)
 8001168:	f005 ff9e 	bl	80070a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM15_Init+0x15a>
  {
    Error_Handler();
 8001172:	f7ff fdb0 	bl	8000cd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <MX_TIM15_Init+0x168>)
 8001178:	f000 f85a 	bl	8001230 <HAL_TIM_MspPostInit>

}
 800117c:	bf00      	nop
 800117e:	3778      	adds	r7, #120	; 0x78
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000654 	.word	0x20000654
 8001188:	40014000 	.word	0x40014000

0800118c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <HAL_TIM_Base_MspInit+0x5c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d10c      	bne.n	80011b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011a8:	6613      	str	r3, [r2, #96]	; 0x60
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80011b6:	e010      	b.n	80011da <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM15)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <HAL_TIM_Base_MspInit+0x64>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10b      	bne.n	80011da <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011cc:	6613      	str	r3, [r2, #96]	; 0x60
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_TIM_Base_MspInit+0x60>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40012c00 	.word	0x40012c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40014000 	.word	0x40014000

080011f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001204:	d10b      	bne.n	800121e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_TIM_PWM_MspInit+0x38>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_TIM_PWM_MspInit+0x38>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6593      	str	r3, [r2, #88]	; 0x58
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_TIM_PWM_MspInit+0x38>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000

08001230 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a35      	ldr	r2, [pc, #212]	; (8001324 <HAL_TIM_MspPostInit+0xf4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d11e      	bne.n	8001290 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b35      	ldr	r3, [pc, #212]	; (8001328 <HAL_TIM_MspPostInit+0xf8>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a34      	ldr	r2, [pc, #208]	; (8001328 <HAL_TIM_MspPostInit+0xf8>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b32      	ldr	r3, [pc, #200]	; (8001328 <HAL_TIM_MspPostInit+0xf8>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800126a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800127c:	2301      	movs	r3, #1
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128a:	f002 f9cb 	bl	8003624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800128e:	e045      	b.n	800131c <HAL_TIM_MspPostInit+0xec>
  else if(timHandle->Instance==TIM2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001298:	d11e      	bne.n	80012d8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HAL_TIM_MspPostInit+0xf8>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a22      	ldr	r2, [pc, #136]	; (8001328 <HAL_TIM_MspPostInit+0xf8>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <HAL_TIM_MspPostInit+0xf8>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012c4:	2301      	movs	r3, #1
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f002 f9a7 	bl	8003624 <HAL_GPIO_Init>
}
 80012d6:	e021      	b.n	800131c <HAL_TIM_MspPostInit+0xec>
  else if(timHandle->Instance==TIM15)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_TIM_MspPostInit+0xfc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d11c      	bne.n	800131c <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_TIM_MspPostInit+0xf8>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a10      	ldr	r2, [pc, #64]	; (8001328 <HAL_TIM_MspPostInit+0xf8>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_TIM_MspPostInit+0xf8>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012fa:	2308      	movs	r3, #8
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800130a:	230e      	movs	r3, #14
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001318:	f002 f984 	bl	8003624 <HAL_GPIO_Init>
}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	; 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40012c00 	.word	0x40012c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40014000 	.word	0x40014000

08001330 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001334:	f7ff fd5a 	bl	8000dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <LoopForever+0x6>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <LoopForever+0xe>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	; (800137c <LoopForever+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f005 ff23 	bl	80071a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001362:	f7ff fbe5 	bl	8000b30 <main>

08001366 <LoopForever>:

LoopForever:
    b LoopForever
 8001366:	e7fe      	b.n	8001366 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001368:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001374:	08007250 	.word	0x08007250
  ldr r2, =_sbss
 8001378:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800137c:	200006a4 	.word	0x200006a4

08001380 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <CAN1_RX0_IRQHandler>

08001382 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f001 fd07 	bl	8002da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f80e 	bl	80013b4 <HAL_InitTick>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	e001      	b.n	80013a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a4:	f7ff fc9c 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a8:	79fb      	ldrb	r3, [r7, #7]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <HAL_InitTick+0x6c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d023      	beq.n	8001410 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_InitTick+0x70>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <HAL_InitTick+0x6c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fd13 	bl	8002e0a <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10f      	bne.n	800140a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d809      	bhi.n	8001404 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f001 fcdd 	bl	8002db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_InitTick+0x74>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e007      	b.n	8001414 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e004      	b.n	8001414 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	e001      	b.n	8001414 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000010 	.word	0x20000010
 8001424:	20000008 	.word	0x20000008
 8001428:	2000000c 	.word	0x2000000c

0800142c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x20>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x24>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_IncTick+0x24>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000010 	.word	0x20000010
 8001450:	200006a0 	.word	0x200006a0

08001454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_GetTick+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	200006a0 	.word	0x200006a0

0800146c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff ffee 	bl	8001454 <HAL_GetTick>
 8001478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d005      	beq.n	8001492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_Delay+0x44>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001492:	bf00      	nop
 8001494:	f7ff ffde 	bl	8001454 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8f7      	bhi.n	8001494 <HAL_Delay+0x28>
  {
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000010 	.word	0x20000010

080014b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	609a      	str	r2, [r3, #8]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	609a      	str	r2, [r3, #8]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3360      	adds	r3, #96	; 0x60
 800152e:	461a      	mov	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <LL_ADC_SetOffset+0x44>)
 800153e:	4013      	ands	r3, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	4313      	orrs	r3, r2
 800154c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001554:	bf00      	nop
 8001556:	371c      	adds	r7, #28
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	03fff000 	.word	0x03fff000

08001564 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3360      	adds	r3, #96	; 0x60
 8001572:	461a      	mov	r2, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3360      	adds	r3, #96	; 0x60
 80015a0:	461a      	mov	r2, r3
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	431a      	orrs	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015ba:	bf00      	nop
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3330      	adds	r3, #48	; 0x30
 80015fc:	461a      	mov	r2, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	4413      	add	r3, r2
 800160a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	211f      	movs	r1, #31
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	401a      	ands	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	0e9b      	lsrs	r3, r3, #26
 8001624:	f003 011f 	and.w	r1, r3, #31
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	f003 031f 	and.w	r3, r3, #31
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	431a      	orrs	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001638:	bf00      	nop
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800166a:	b480      	push	{r7}
 800166c:	b087      	sub	sp, #28
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3314      	adds	r3, #20
 800167a:	461a      	mov	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	0e5b      	lsrs	r3, r3, #25
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	4413      	add	r3, r2
 8001688:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	0d1b      	lsrs	r3, r3, #20
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	2107      	movs	r1, #7
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	0d1b      	lsrs	r3, r3, #20
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	431a      	orrs	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016b4:	bf00      	nop
 80016b6:	371c      	adds	r7, #28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d8:	43db      	mvns	r3, r3
 80016da:	401a      	ands	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0318 	and.w	r3, r3, #24
 80016e2:	4908      	ldr	r1, [pc, #32]	; (8001704 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016e4:	40d9      	lsrs	r1, r3
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	400b      	ands	r3, r1
 80016ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ee:	431a      	orrs	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	0007ffff 	.word	0x0007ffff

08001708 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001718:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6093      	str	r3, [r2, #8]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800173c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001740:	d101      	bne.n	8001746 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001764:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001768:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001790:	d101      	bne.n	8001796 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <LL_ADC_IsEnabled+0x18>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <LL_ADC_IsEnabled+0x1a>
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001802:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001806:	f043 0204 	orr.w	r2, r3, #4
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b04      	cmp	r3, #4
 800182c:	d101      	bne.n	8001832 <LL_ADC_REG_IsConversionOngoing+0x18>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b08      	cmp	r3, #8
 8001852:	d101      	bne.n	8001858 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e126      	b.n	8001ad0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7fe fe1b 	bl	80004cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff3f 	bl	800172c <LL_ADC_IsDeepPowerDownEnabled>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff25 	bl	8001708 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff5a 	bl	800177c <LL_ADC_IsInternalRegulatorEnabled>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d115      	bne.n	80018fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff3e 	bl	8001754 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018d8:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <HAL_ADC_Init+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	4a7f      	ldr	r2, [pc, #508]	; (8001adc <HAL_ADC_Init+0x274>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	3301      	adds	r3, #1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f9      	bne.n	80018ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff3c 	bl	800177c <LL_ADC_IsInternalRegulatorEnabled>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10d      	bne.n	8001926 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	f043 0210 	orr.w	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff75 	bl	800181a <LL_ADC_REG_IsConversionOngoing>
 8001930:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	f040 80bf 	bne.w	8001abe <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 80bb 	bne.w	8001abe <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001950:	f043 0202 	orr.w	r2, r3, #2
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff35 	bl	80017cc <LL_ADC_IsEnabled>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10b      	bne.n	8001980 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001968:	485d      	ldr	r0, [pc, #372]	; (8001ae0 <HAL_ADC_Init+0x278>)
 800196a:	f7ff ff2f 	bl	80017cc <LL_ADC_IsEnabled>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d105      	bne.n	8001980 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4619      	mov	r1, r3
 800197a:	485a      	ldr	r0, [pc, #360]	; (8001ae4 <HAL_ADC_Init+0x27c>)
 800197c:	f7ff fd9a 	bl	80014b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7e5b      	ldrb	r3, [r3, #25]
 8001984:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800198a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001990:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001996:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d106      	bne.n	80019bc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	3b01      	subs	r3, #1
 80019b4:	045b      	lsls	r3, r3, #17
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d009      	beq.n	80019d8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <HAL_ADC_Init+0x280>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	69b9      	ldr	r1, [r7, #24]
 80019e8:	430b      	orrs	r3, r1
 80019ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff25 	bl	8001840 <LL_ADC_INJ_IsConversionOngoing>
 80019f6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d13d      	bne.n	8001a7a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d13a      	bne.n	8001a7a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a08:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a10:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a20:	f023 0302 	bic.w	r3, r3, #2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	69b9      	ldr	r1, [r7, #24]
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d118      	bne.n	8001a6a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a42:	f023 0304 	bic.w	r3, r3, #4
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a54:	4311      	orrs	r1, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	611a      	str	r2, [r3, #16]
 8001a68:	e007      	b.n	8001a7a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	691a      	ldr	r2, [r3, #16]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0201 	bic.w	r2, r2, #1
 8001a78:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d10c      	bne.n	8001a9c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	f023 010f 	bic.w	r1, r3, #15
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	1e5a      	subs	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	631a      	str	r2, [r3, #48]	; 0x30
 8001a9a:	e007      	b.n	8001aac <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 020f 	bic.w	r2, r2, #15
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab0:	f023 0303 	bic.w	r3, r3, #3
 8001ab4:	f043 0201 	orr.w	r2, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
 8001abc:	e007      	b.n	8001ace <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f043 0210 	orr.w	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	053e2d63 	.word	0x053e2d63
 8001ae0:	50040000 	.word	0x50040000
 8001ae4:	50040300 	.word	0x50040300
 8001ae8:	fff0c007 	.word	0xfff0c007

08001aec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fe8c 	bl	800181a <LL_ADC_REG_IsConversionOngoing>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d167      	bne.n	8001bd8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Start_DMA+0x2a>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e063      	b.n	8001bde <HAL_ADC_Start_DMA+0xf2>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fe26 	bl	8002770 <ADC_Enable>
 8001b24:	4603      	mov	r3, r0
 8001b26:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d14f      	bne.n	8001bce <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	f023 0206 	bic.w	r2, r3, #6
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	659a      	str	r2, [r3, #88]	; 0x58
 8001b5a:	e002      	b.n	8001b62 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <HAL_ADC_Start_DMA+0xfc>)
 8001b68:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <HAL_ADC_Start_DMA+0x100>)
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <HAL_ADC_Start_DMA+0x104>)
 8001b78:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	221c      	movs	r2, #28
 8001b80:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0210 	orr.w	r2, r2, #16
 8001b98:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3340      	adds	r3, #64	; 0x40
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f001 fba5 	bl	8003308 <HAL_DMA_Start_IT>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fe13 	bl	80017f2 <LL_ADC_REG_StartConversion>
 8001bcc:	e006      	b.n	8001bdc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001bd6:	e001      	b.n	8001bdc <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	0800287d 	.word	0x0800287d
 8001bec:	08002955 	.word	0x08002955
 8001bf0:	08002971 	.word	0x08002971

08001bf4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d017      	beq.n	8001c4a <HAL_ADC_IRQHandler+0x56>
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d012      	beq.n	8001c4a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c34:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fed9 	bl	80029f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2202      	movs	r2, #2
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <HAL_ADC_IRQHandler+0x6a>
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d05e      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d059      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d105      	bne.n	8001c8a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fc99 	bl	80015c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d03e      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d135      	bne.n	8001d18 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d12e      	bne.n	8001d18 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fdab 	bl	800181a <LL_ADC_REG_IsConversionOngoing>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d11a      	bne.n	8001d00 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 020c 	bic.w	r2, r2, #12
 8001cd8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d112      	bne.n	8001d18 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
 8001cfe:	e00b      	b.n	8001d18 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d04:	f043 0210 	orr.w	r2, r3, #16
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f91f 	bl	8001f5c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <HAL_ADC_IRQHandler+0x146>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d072      	beq.n	8001e2a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d06d      	beq.n	8001e2a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d105      	bne.n	8001d66 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fc6a 	bl	8001644 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001d70:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fc25 	bl	80015c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d7c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d047      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <HAL_ADC_IRQHandler+0x1b2>
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d03f      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d13a      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db0:	2b40      	cmp	r3, #64	; 0x40
 8001db2:	d133      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d12e      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fd3c 	bl	8001840 <LL_ADC_INJ_IsConversionOngoing>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d11a      	bne.n	8001e04 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ddc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d112      	bne.n	8001e1c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
 8001e02:	e00b      	b.n	8001e1c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e08:	f043 0210 	orr.w	r2, r3, #16
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fdc1 	bl	80029a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2260      	movs	r2, #96	; 0x60
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d011      	beq.n	8001e58 <HAL_ADC_IRQHandler+0x264>
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f89a 	bl	8001f84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2280      	movs	r2, #128	; 0x80
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d012      	beq.n	8001e88 <HAL_ADC_IRQHandler+0x294>
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00d      	beq.n	8001e88 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fda7 	bl	80029cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d012      	beq.n	8001eb8 <HAL_ADC_IRQHandler+0x2c4>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00d      	beq.n	8001eb8 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fd99 	bl	80029e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d02a      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x324>
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d025      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	e008      	b.n	8001eec <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10e      	bne.n	8001f10 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	f043 0202 	orr.w	r2, r3, #2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f844 	bl	8001f98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2210      	movs	r2, #16
 8001f16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d018      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x360>
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	f043 0208 	orr.w	r2, r3, #8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f4c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fd32 	bl	80029b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001f54:	bf00      	nop
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b0b6      	sub	sp, #216	; 0xd8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x22>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e3bb      	b.n	8002746 <HAL_ADC_ConfigChannel+0x79a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fc1d 	bl	800181a <LL_ADC_REG_IsConversionOngoing>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 83a0 	bne.w	8002728 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d824      	bhi.n	8002042 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	3b02      	subs	r3, #2
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d81b      	bhi.n	800203a <HAL_ADC_ConfigChannel+0x8e>
 8002002:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <HAL_ADC_ConfigChannel+0x5c>)
 8002004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002008:	08002019 	.word	0x08002019
 800200c:	08002021 	.word	0x08002021
 8002010:	08002029 	.word	0x08002029
 8002014:	08002031 	.word	0x08002031
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002018:	230c      	movs	r3, #12
 800201a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800201e:	e010      	b.n	8002042 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002020:	2312      	movs	r3, #18
 8002022:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002026:	e00c      	b.n	8002042 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002028:	2318      	movs	r3, #24
 800202a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800202e:	e008      	b.n	8002042 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002038:	e003      	b.n	8002042 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800203a:	2306      	movs	r3, #6
 800203c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002040:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002050:	f7ff facc 	bl	80015ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fbde 	bl	800181a <LL_ADC_REG_IsConversionOngoing>
 800205e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fbea 	bl	8001840 <LL_ADC_INJ_IsConversionOngoing>
 800206c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002070:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002074:	2b00      	cmp	r3, #0
 8002076:	f040 81a4 	bne.w	80023c2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800207a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800207e:	2b00      	cmp	r3, #0
 8002080:	f040 819f 	bne.w	80023c2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6819      	ldr	r1, [r3, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	461a      	mov	r2, r3
 8002092:	f7ff faea 	bl	800166a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d00a      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6919      	ldr	r1, [r3, #16]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020c8:	f7ff fa28 	bl	800151c <LL_ADC_SetOffset>
 80020cc:	e179      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fa45 	bl	8001564 <LL_ADC_GetOffsetChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10a      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x14e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fa3a 	bl	8001564 <LL_ADC_GetOffsetChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	0e9b      	lsrs	r3, r3, #26
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	e01e      	b.n	8002138 <HAL_ADC_ConfigChannel+0x18c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fa2f 	bl	8001564 <LL_ADC_GetOffsetChannel>
 8002106:	4603      	mov	r3, r0
 8002108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800211c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002120:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002128:	2320      	movs	r3, #32
 800212a:	e004      	b.n	8002136 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800212c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x1a4>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	e018      	b.n	8002182 <HAL_ADC_ConfigChannel+0x1d6>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800216c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002174:	2320      	movs	r3, #32
 8002176:	e004      	b.n	8002182 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002178:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002182:	429a      	cmp	r2, r3
 8002184:	d106      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff f9fe 	bl	8001590 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f9e2 	bl	8001564 <LL_ADC_GetOffsetChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x214>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2101      	movs	r1, #1
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff f9d7 	bl	8001564 <LL_ADC_GetOffsetChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	0e9b      	lsrs	r3, r3, #26
 80021ba:	f003 021f 	and.w	r2, r3, #31
 80021be:	e01e      	b.n	80021fe <HAL_ADC_ConfigChannel+0x252>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff f9cc 	bl	8001564 <LL_ADC_GetOffsetChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80021de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80021e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e004      	b.n	80021fc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80021f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002206:	2b00      	cmp	r3, #0
 8002208:	d105      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x26a>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0e9b      	lsrs	r3, r3, #26
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	e018      	b.n	8002248 <HAL_ADC_ConfigChannel+0x29c>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800222a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800222e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002232:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800223a:	2320      	movs	r3, #32
 800223c:	e004      	b.n	8002248 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800223e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002248:	429a      	cmp	r2, r3
 800224a:	d106      	bne.n	800225a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2200      	movs	r2, #0
 8002252:	2101      	movs	r1, #1
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f99b 	bl	8001590 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2102      	movs	r1, #2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff f97f 	bl	8001564 <LL_ADC_GetOffsetChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10a      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x2da>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2102      	movs	r1, #2
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f974 	bl	8001564 <LL_ADC_GetOffsetChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	e01e      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x318>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2102      	movs	r1, #2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff f969 	bl	8001564 <LL_ADC_GetOffsetChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80022a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80022ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e004      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80022b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x330>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0e9b      	lsrs	r3, r3, #26
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	e014      	b.n	8002306 <HAL_ADC_ConfigChannel+0x35a>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80022ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80022f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80022f8:	2320      	movs	r3, #32
 80022fa:	e004      	b.n	8002306 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80022fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002306:	429a      	cmp	r2, r3
 8002308:	d106      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2200      	movs	r2, #0
 8002310:	2102      	movs	r1, #2
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff f93c 	bl	8001590 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2103      	movs	r1, #3
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f920 	bl	8001564 <LL_ADC_GetOffsetChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10a      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x398>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2103      	movs	r1, #3
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff f915 	bl	8001564 <LL_ADC_GetOffsetChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	f003 021f 	and.w	r2, r3, #31
 8002342:	e017      	b.n	8002374 <HAL_ADC_ConfigChannel+0x3c8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2103      	movs	r1, #3
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff f90a 	bl	8001564 <LL_ADC_GetOffsetChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800235c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002366:	2320      	movs	r3, #32
 8002368:	e003      	b.n	8002372 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800236a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237c:	2b00      	cmp	r3, #0
 800237e:	d105      	bne.n	800238c <HAL_ADC_ConfigChannel+0x3e0>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0e9b      	lsrs	r3, r3, #26
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	e011      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x404>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800239a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800239c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800239e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e003      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80023a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d106      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2200      	movs	r2, #0
 80023ba:	2103      	movs	r1, #3
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f8e7 	bl	8001590 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fa00 	bl	80017cc <LL_ADC_IsEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f040 8140 	bne.w	8002654 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	461a      	mov	r2, r3
 80023e2:	f7ff f96d 	bl	80016c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a8f      	ldr	r2, [pc, #572]	; (8002628 <HAL_ADC_ConfigChannel+0x67c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	f040 8131 	bne.w	8002654 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10b      	bne.n	800241a <HAL_ADC_ConfigChannel+0x46e>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	3301      	adds	r3, #1
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2b09      	cmp	r3, #9
 8002410:	bf94      	ite	ls
 8002412:	2301      	movls	r3, #1
 8002414:	2300      	movhi	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	e019      	b.n	800244e <HAL_ADC_ConfigChannel+0x4a2>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800242c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	2b09      	cmp	r3, #9
 8002446:	bf94      	ite	ls
 8002448:	2301      	movls	r3, #1
 800244a:	2300      	movhi	r3, #0
 800244c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244e:	2b00      	cmp	r3, #0
 8002450:	d079      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245a:	2b00      	cmp	r3, #0
 800245c:	d107      	bne.n	800246e <HAL_ADC_ConfigChannel+0x4c2>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	0e9b      	lsrs	r3, r3, #26
 8002464:	3301      	adds	r3, #1
 8002466:	069b      	lsls	r3, r3, #26
 8002468:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800246c:	e015      	b.n	800249a <HAL_ADC_ConfigChannel+0x4ee>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800247c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002486:	2320      	movs	r3, #32
 8002488:	e003      	b.n	8002492 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800248a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3301      	adds	r3, #1
 8002494:	069b      	lsls	r3, r3, #26
 8002496:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x50e>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0e9b      	lsrs	r3, r3, #26
 80024ac:	3301      	adds	r3, #1
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	e017      	b.n	80024ea <HAL_ADC_ConfigChannel+0x53e>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80024cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80024d2:	2320      	movs	r3, #32
 80024d4:	e003      	b.n	80024de <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80024d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2101      	movs	r1, #1
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	ea42 0103 	orr.w	r1, r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10a      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x564>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0e9b      	lsrs	r3, r3, #26
 8002500:	3301      	adds	r3, #1
 8002502:	f003 021f 	and.w	r2, r3, #31
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	051b      	lsls	r3, r3, #20
 800250e:	e018      	b.n	8002542 <HAL_ADC_ConfigChannel+0x596>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	e003      	b.n	8002534 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f003 021f 	and.w	r2, r3, #31
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002542:	430b      	orrs	r3, r1
 8002544:	e081      	b.n	800264a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x5b6>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	3301      	adds	r3, #1
 800255a:	069b      	lsls	r3, r3, #26
 800255c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002560:	e015      	b.n	800258e <HAL_ADC_ConfigChannel+0x5e2>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800257a:	2320      	movs	r3, #32
 800257c:	e003      	b.n	8002586 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3301      	adds	r3, #1
 8002588:	069b      	lsls	r3, r3, #26
 800258a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x602>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	3301      	adds	r3, #1
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	e017      	b.n	80025de <HAL_ADC_ConfigChannel+0x632>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	61bb      	str	r3, [r7, #24]
  return result;
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80025c6:	2320      	movs	r3, #32
 80025c8:	e003      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	ea42 0103 	orr.w	r1, r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10d      	bne.n	800260a <HAL_ADC_ConfigChannel+0x65e>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	0e9b      	lsrs	r3, r3, #26
 80025f4:	3301      	adds	r3, #1
 80025f6:	f003 021f 	and.w	r2, r3, #31
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	3b1e      	subs	r3, #30
 8002602:	051b      	lsls	r3, r3, #20
 8002604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002608:	e01e      	b.n	8002648 <HAL_ADC_ConfigChannel+0x69c>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	60fb      	str	r3, [r7, #12]
  return result;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d104      	bne.n	800262c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002622:	2320      	movs	r3, #32
 8002624:	e006      	b.n	8002634 <HAL_ADC_ConfigChannel+0x688>
 8002626:	bf00      	nop
 8002628:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f003 021f 	and.w	r2, r3, #31
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	3b1e      	subs	r3, #30
 8002642:	051b      	lsls	r3, r3, #20
 8002644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002648:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800264e:	4619      	mov	r1, r3
 8002650:	f7ff f80b 	bl	800166a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <HAL_ADC_ConfigChannel+0x7a4>)
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d06c      	beq.n	800273a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002660:	483c      	ldr	r0, [pc, #240]	; (8002754 <HAL_ADC_ConfigChannel+0x7a8>)
 8002662:	f7fe ff4d 	bl	8001500 <LL_ADC_GetCommonPathInternalCh>
 8002666:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a3a      	ldr	r2, [pc, #232]	; (8002758 <HAL_ADC_ConfigChannel+0x7ac>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d127      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d121      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a35      	ldr	r2, [pc, #212]	; (800275c <HAL_ADC_ConfigChannel+0x7b0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d157      	bne.n	800273a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800268a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800268e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002692:	4619      	mov	r1, r3
 8002694:	482f      	ldr	r0, [pc, #188]	; (8002754 <HAL_ADC_ConfigChannel+0x7a8>)
 8002696:	f7fe ff20 	bl	80014da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800269a:	4b31      	ldr	r3, [pc, #196]	; (8002760 <HAL_ADC_ConfigChannel+0x7b4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	4a30      	ldr	r2, [pc, #192]	; (8002764 <HAL_ADC_ConfigChannel+0x7b8>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	099b      	lsrs	r3, r3, #6
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026b4:	e002      	b.n	80026bc <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f9      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026c2:	e03a      	b.n	800273a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a27      	ldr	r2, [pc, #156]	; (8002768 <HAL_ADC_ConfigChannel+0x7bc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d113      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10d      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1f      	ldr	r2, [pc, #124]	; (800275c <HAL_ADC_ConfigChannel+0x7b0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d12a      	bne.n	800273a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ec:	4619      	mov	r1, r3
 80026ee:	4819      	ldr	r0, [pc, #100]	; (8002754 <HAL_ADC_ConfigChannel+0x7a8>)
 80026f0:	f7fe fef3 	bl	80014da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026f4:	e021      	b.n	800273a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <HAL_ADC_ConfigChannel+0x7c0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d11c      	bne.n	800273a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d116      	bne.n	800273a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a12      	ldr	r2, [pc, #72]	; (800275c <HAL_ADC_ConfigChannel+0x7b0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d111      	bne.n	800273a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800271a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800271e:	4619      	mov	r1, r3
 8002720:	480c      	ldr	r0, [pc, #48]	; (8002754 <HAL_ADC_ConfigChannel+0x7a8>)
 8002722:	f7fe feda 	bl	80014da <LL_ADC_SetCommonPathInternalCh>
 8002726:	e008      	b.n	800273a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002742:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002746:	4618      	mov	r0, r3
 8002748:	37d8      	adds	r7, #216	; 0xd8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	80080000 	.word	0x80080000
 8002754:	50040300 	.word	0x50040300
 8002758:	c7520000 	.word	0xc7520000
 800275c:	50040000 	.word	0x50040000
 8002760:	20000008 	.word	0x20000008
 8002764:	053e2d63 	.word	0x053e2d63
 8002768:	cb840000 	.word	0xcb840000
 800276c:	80000001 	.word	0x80000001

08002770 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f823 	bl	80017cc <LL_ADC_IsEnabled>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d169      	bne.n	8002860 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	4b36      	ldr	r3, [pc, #216]	; (800286c <ADC_Enable+0xfc>)
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f043 0210 	orr.w	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e055      	b.n	8002862 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fff2 	bl	80017a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027c0:	482b      	ldr	r0, [pc, #172]	; (8002870 <ADC_Enable+0x100>)
 80027c2:	f7fe fe9d 	bl	8001500 <LL_ADC_GetCommonPathInternalCh>
 80027c6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d0:	4b28      	ldr	r3, [pc, #160]	; (8002874 <ADC_Enable+0x104>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	4a28      	ldr	r2, [pc, #160]	; (8002878 <ADC_Enable+0x108>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027ea:	e002      	b.n	80027f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f9      	bne.n	80027ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027f8:	f7fe fe2c 	bl	8001454 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027fe:	e028      	b.n	8002852 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe ffe1 	bl	80017cc <LL_ADC_IsEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe ffc5 	bl	80017a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800281a:	f7fe fe1b 	bl	8001454 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d914      	bls.n	8002852 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d00d      	beq.n	8002852 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e007      	b.n	8002862 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d1cf      	bne.n	8002800 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	8000003f 	.word	0x8000003f
 8002870:	50040300 	.word	0x50040300
 8002874:	20000008 	.word	0x20000008
 8002878:	053e2d63 	.word	0x053e2d63

0800287c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002892:	2b00      	cmp	r3, #0
 8002894:	d14b      	bne.n	800292e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d021      	beq.n	80028f4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fe86 	bl	80015c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d032      	beq.n	8002926 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d12b      	bne.n	8002926 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d11f      	bne.n	8002926 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
 80028f2:	e018      	b.n	8002926 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d111      	bne.n	8002926 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d105      	bne.n	8002926 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff fb18 	bl	8001f5c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800292c:	e00e      	b.n	800294c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7ff fb2c 	bl	8001f98 <HAL_ADC_ErrorCallback>
}
 8002940:	e004      	b.n	800294c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff fb04 	bl	8001f70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	f043 0204 	orr.w	r2, r3, #4
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f7ff fafe 	bl	8001f98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0ed      	b.n	8002bf6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fd fe22 	bl	8000670 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a3c:	f7fe fd0a 	bl	8001454 <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a42:	e012      	b.n	8002a6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a44:	f7fe fd06 	bl	8001454 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b0a      	cmp	r3, #10
 8002a50:	d90b      	bls.n	8002a6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2205      	movs	r2, #5
 8002a62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0c5      	b.n	8002bf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0e5      	beq.n	8002a44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0202 	bic.w	r2, r2, #2
 8002a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a88:	f7fe fce4 	bl	8001454 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a8e:	e012      	b.n	8002ab6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a90:	f7fe fce0 	bl	8001454 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b0a      	cmp	r3, #10
 8002a9c:	d90b      	bls.n	8002ab6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2205      	movs	r2, #5
 8002aae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e09f      	b.n	8002bf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e5      	bne.n	8002a90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7e1b      	ldrb	r3, [r3, #24]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d108      	bne.n	8002ade <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e007      	b.n	8002aee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	7e5b      	ldrb	r3, [r3, #25]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d108      	bne.n	8002b08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e007      	b.n	8002b18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7e9b      	ldrb	r3, [r3, #26]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d108      	bne.n	8002b32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0220 	orr.w	r2, r2, #32
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e007      	b.n	8002b42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0220 	bic.w	r2, r2, #32
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7edb      	ldrb	r3, [r3, #27]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d108      	bne.n	8002b5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0210 	bic.w	r2, r2, #16
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	e007      	b.n	8002b6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0210 	orr.w	r2, r2, #16
 8002b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7f1b      	ldrb	r3, [r3, #28]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d108      	bne.n	8002b86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0208 	orr.w	r2, r2, #8
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e007      	b.n	8002b96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0208 	bic.w	r2, r2, #8
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7f5b      	ldrb	r3, [r3, #29]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0204 	orr.w	r2, r2, #4
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e007      	b.n	8002bc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0204 	bic.w	r2, r2, #4
 8002bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	ea42 0103 	orr.w	r1, r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c32:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	60d3      	str	r3, [r2, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <__NVIC_GetPriorityGrouping+0x18>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f003 0307 	and.w	r3, r3, #7
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	db0b      	blt.n	8002c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	f003 021f 	and.w	r2, r3, #31
 8002c7c:	4907      	ldr	r1, [pc, #28]	; (8002c9c <__NVIC_EnableIRQ+0x38>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	2001      	movs	r0, #1
 8002c86:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000e100 	.word	0xe000e100

08002ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	db0a      	blt.n	8002cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	490c      	ldr	r1, [pc, #48]	; (8002cec <__NVIC_SetPriority+0x4c>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc8:	e00a      	b.n	8002ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4908      	ldr	r1, [pc, #32]	; (8002cf0 <__NVIC_SetPriority+0x50>)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	440b      	add	r3, r1
 8002cde:	761a      	strb	r2, [r3, #24]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000e100 	.word	0xe000e100
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f1c3 0307 	rsb	r3, r3, #7
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	bf28      	it	cs
 8002d12:	2304      	movcs	r3, #4
 8002d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d902      	bls.n	8002d24 <NVIC_EncodePriority+0x30>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3b03      	subs	r3, #3
 8002d22:	e000      	b.n	8002d26 <NVIC_EncodePriority+0x32>
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	401a      	ands	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	4313      	orrs	r3, r2
         );
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	; 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d6c:	d301      	bcc.n	8002d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00f      	b.n	8002d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <SysTick_Config+0x40>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f7ff ff8e 	bl	8002ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <SysTick_Config+0x40>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <SysTick_Config+0x40>)
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff29 	bl	8002c00 <__NVIC_SetPriorityGrouping>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc8:	f7ff ff3e 	bl	8002c48 <__NVIC_GetPriorityGrouping>
 8002dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	6978      	ldr	r0, [r7, #20]
 8002dd4:	f7ff ff8e 	bl	8002cf4 <NVIC_EncodePriority>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff5d 	bl	8002ca0 <__NVIC_SetPriority>
}
 8002de6:	bf00      	nop
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff31 	bl	8002c64 <__NVIC_EnableIRQ>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ffa2 	bl	8002d5c <SysTick_Config>
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e014      	b.n	8002e5e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	791b      	ldrb	r3, [r3, #4]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fd fc89 	bl	800075c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	795b      	ldrb	r3, [r3, #5]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_DAC_Start+0x16>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e03b      	b.n	8002ef4 <HAL_DAC_Start+0x8e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2202      	movs	r2, #2
 8002e86:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2201      	movs	r2, #1
 8002e96:	409a      	lsls	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10f      	bne.n	8002ec6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d118      	bne.n	8002ee6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	e00f      	b.n	8002ee6 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ed0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ed4:	d107      	bne.n	8002ee6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0202 	orr.w	r2, r2, #2
 8002ee4:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	3308      	adds	r3, #8
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	e004      	b.n	8002f34 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3314      	adds	r3, #20
 8002f32:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	461a      	mov	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b088      	sub	sp, #32
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	795b      	ldrb	r3, [r3, #5]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_DAC_ConfigChannel+0x1c>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e114      	b.n	8003190 <HAL_DAC_ConfigChannel+0x246>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	f040 8081 	bne.w	800307e <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f7c:	f7fe fa6a 	bl	8001454 <HAL_GetTick>
 8002f80:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d140      	bne.n	800300a <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f88:	e018      	b.n	8002fbc <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f8a:	f7fe fa63 	bl	8001454 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d911      	bls.n	8002fbc <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f043 0208 	orr.w	r2, r3, #8
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e0e9      	b.n	8003190 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1df      	bne.n	8002f8a <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7fe fa4e 	bl	800146c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	6992      	ldr	r2, [r2, #24]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
 8002fda:	e023      	b.n	8003024 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fdc:	f7fe fa3a 	bl	8001454 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d90f      	bls.n	800300a <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da0a      	bge.n	800300a <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f043 0208 	orr.w	r2, r3, #8
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2203      	movs	r2, #3
 8003004:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0c2      	b.n	8003190 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003010:	2b00      	cmp	r3, #0
 8003012:	dbe3      	blt.n	8002fdc <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003014:	2001      	movs	r0, #1
 8003016:	f7fe fa29 	bl	800146c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	6992      	ldr	r2, [r2, #24]
 8003022:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003034:	fa01 f303 	lsl.w	r3, r1, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	ea02 0103 	and.w	r1, r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	409a      	lsls	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	21ff      	movs	r1, #255	; 0xff
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	ea02 0103 	and.w	r1, r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	6a1a      	ldr	r2, [r3, #32]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	409a      	lsls	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d11d      	bne.n	80030c2 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	221f      	movs	r2, #31
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2207      	movs	r2, #7
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43da      	mvns	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	400a      	ands	r2, r1
 8003126:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	f640 72fc 	movw	r2, #4092	; 0xffc
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	22c0      	movs	r2, #192	; 0xc0
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43da      	mvns	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	400a      	ands	r2, r1
 8003180:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3720      	adds	r7, #32
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e098      	b.n	80032dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b4d      	ldr	r3, [pc, #308]	; (80032e8 <HAL_DMA_Init+0x150>)
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d80f      	bhi.n	80031d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b4b      	ldr	r3, [pc, #300]	; (80032ec <HAL_DMA_Init+0x154>)
 80031be:	4413      	add	r3, r2
 80031c0:	4a4b      	ldr	r2, [pc, #300]	; (80032f0 <HAL_DMA_Init+0x158>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	009a      	lsls	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a48      	ldr	r2, [pc, #288]	; (80032f4 <HAL_DMA_Init+0x15c>)
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
 80031d4:	e00e      	b.n	80031f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	4b46      	ldr	r3, [pc, #280]	; (80032f8 <HAL_DMA_Init+0x160>)
 80031de:	4413      	add	r3, r2
 80031e0:	4a43      	ldr	r2, [pc, #268]	; (80032f0 <HAL_DMA_Init+0x158>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	009a      	lsls	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a42      	ldr	r2, [pc, #264]	; (80032fc <HAL_DMA_Init+0x164>)
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324e:	d039      	beq.n	80032c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <HAL_DMA_Init+0x15c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d11a      	bne.n	8003290 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800325a:	4b29      	ldr	r3, [pc, #164]	; (8003300 <HAL_DMA_Init+0x168>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f003 031c 	and.w	r3, r3, #28
 8003266:	210f      	movs	r1, #15
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	4924      	ldr	r1, [pc, #144]	; (8003300 <HAL_DMA_Init+0x168>)
 8003270:	4013      	ands	r3, r2
 8003272:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003274:	4b22      	ldr	r3, [pc, #136]	; (8003300 <HAL_DMA_Init+0x168>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f003 031c 	and.w	r3, r3, #28
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	491d      	ldr	r1, [pc, #116]	; (8003300 <HAL_DMA_Init+0x168>)
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
 800328e:	e019      	b.n	80032c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003290:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <HAL_DMA_Init+0x16c>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f003 031c 	and.w	r3, r3, #28
 800329c:	210f      	movs	r1, #15
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4917      	ldr	r1, [pc, #92]	; (8003304 <HAL_DMA_Init+0x16c>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <HAL_DMA_Init+0x16c>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f003 031c 	and.w	r3, r3, #28
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	4911      	ldr	r1, [pc, #68]	; (8003304 <HAL_DMA_Init+0x16c>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40020407 	.word	0x40020407
 80032ec:	bffdfff8 	.word	0xbffdfff8
 80032f0:	cccccccd 	.word	0xcccccccd
 80032f4:	40020000 	.word	0x40020000
 80032f8:	bffdfbf8 	.word	0xbffdfbf8
 80032fc:	40020400 	.word	0x40020400
 8003300:	400200a8 	.word	0x400200a8
 8003304:	400204a8 	.word	0x400204a8

08003308 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_DMA_Start_IT+0x20>
 8003324:	2302      	movs	r3, #2
 8003326:	e04b      	b.n	80033c0 <HAL_DMA_Start_IT+0xb8>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d13a      	bne.n	80033b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f92f 	bl	80035c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 020e 	orr.w	r2, r2, #14
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e00f      	b.n	80033a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0204 	bic.w	r2, r2, #4
 800338e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 020a 	orr.w	r2, r2, #10
 800339e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e005      	b.n	80033be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
 80033bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033be:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d005      	beq.n	80033ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2204      	movs	r2, #4
 80033e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
 80033ea:	e029      	b.n	8003440 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 020e 	bic.w	r2, r2, #14
 80033fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	f003 021c 	and.w	r2, r3, #28
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	2101      	movs	r1, #1
 800341a:	fa01 f202 	lsl.w	r2, r1, r2
 800341e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
    }
  }
  return status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	f003 031c 	and.w	r3, r3, #28
 800346a:	2204      	movs	r2, #4
 800346c:	409a      	lsls	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d026      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x7a>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d021      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0204 	bic.w	r2, r2, #4
 800349c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f003 021c 	and.w	r2, r3, #28
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2104      	movs	r1, #4
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d071      	beq.n	800359e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80034c2:	e06c      	b.n	800359e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	f003 031c 	and.w	r3, r3, #28
 80034cc:	2202      	movs	r2, #2
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d02e      	beq.n	8003536 <HAL_DMA_IRQHandler+0xec>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d029      	beq.n	8003536 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 020a 	bic.w	r2, r2, #10
 80034fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	f003 021c 	and.w	r2, r3, #28
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	2102      	movs	r1, #2
 8003516:	fa01 f202 	lsl.w	r2, r1, r2
 800351a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d038      	beq.n	800359e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003534:	e033      	b.n	800359e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f003 031c 	and.w	r3, r3, #28
 800353e:	2208      	movs	r2, #8
 8003540:	409a      	lsls	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d02a      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x156>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d025      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 020e 	bic.w	r2, r2, #14
 8003562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	f003 021c 	and.w	r2, r3, #28
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	2101      	movs	r1, #1
 8003572:	fa01 f202 	lsl.w	r2, r1, r2
 8003576:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
}
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035b6:	b2db      	uxtb	r3, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f003 021c 	and.w	r2, r3, #28
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d108      	bne.n	8003608 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003606:	e007      	b.n	8003618 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	60da      	str	r2, [r3, #12]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003632:	e154      	b.n	80038de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	2101      	movs	r1, #1
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	4013      	ands	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8146 	beq.w	80038d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d005      	beq.n	8003664 <HAL_GPIO_Init+0x40>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d130      	bne.n	80036c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	2203      	movs	r2, #3
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800369a:	2201      	movs	r2, #1
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	f003 0201 	and.w	r2, r3, #1
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d017      	beq.n	8003702 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	2203      	movs	r2, #3
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d123      	bne.n	8003756 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	08da      	lsrs	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3208      	adds	r2, #8
 8003716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800371a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	220f      	movs	r2, #15
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	08da      	lsrs	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3208      	adds	r2, #8
 8003750:	6939      	ldr	r1, [r7, #16]
 8003752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	2203      	movs	r2, #3
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0203 	and.w	r2, r3, #3
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80a0 	beq.w	80038d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003798:	4b58      	ldr	r3, [pc, #352]	; (80038fc <HAL_GPIO_Init+0x2d8>)
 800379a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379c:	4a57      	ldr	r2, [pc, #348]	; (80038fc <HAL_GPIO_Init+0x2d8>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6613      	str	r3, [r2, #96]	; 0x60
 80037a4:	4b55      	ldr	r3, [pc, #340]	; (80038fc <HAL_GPIO_Init+0x2d8>)
 80037a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037b0:	4a53      	ldr	r2, [pc, #332]	; (8003900 <HAL_GPIO_Init+0x2dc>)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	089b      	lsrs	r3, r3, #2
 80037b6:	3302      	adds	r3, #2
 80037b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	220f      	movs	r2, #15
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037da:	d019      	beq.n	8003810 <HAL_GPIO_Init+0x1ec>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a49      	ldr	r2, [pc, #292]	; (8003904 <HAL_GPIO_Init+0x2e0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <HAL_GPIO_Init+0x1e8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a48      	ldr	r2, [pc, #288]	; (8003908 <HAL_GPIO_Init+0x2e4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00d      	beq.n	8003808 <HAL_GPIO_Init+0x1e4>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a47      	ldr	r2, [pc, #284]	; (800390c <HAL_GPIO_Init+0x2e8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d007      	beq.n	8003804 <HAL_GPIO_Init+0x1e0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a46      	ldr	r2, [pc, #280]	; (8003910 <HAL_GPIO_Init+0x2ec>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <HAL_GPIO_Init+0x1dc>
 80037fc:	2304      	movs	r3, #4
 80037fe:	e008      	b.n	8003812 <HAL_GPIO_Init+0x1ee>
 8003800:	2307      	movs	r3, #7
 8003802:	e006      	b.n	8003812 <HAL_GPIO_Init+0x1ee>
 8003804:	2303      	movs	r3, #3
 8003806:	e004      	b.n	8003812 <HAL_GPIO_Init+0x1ee>
 8003808:	2302      	movs	r3, #2
 800380a:	e002      	b.n	8003812 <HAL_GPIO_Init+0x1ee>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <HAL_GPIO_Init+0x1ee>
 8003810:	2300      	movs	r3, #0
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	f002 0203 	and.w	r2, r2, #3
 8003818:	0092      	lsls	r2, r2, #2
 800381a:	4093      	lsls	r3, r2
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003822:	4937      	ldr	r1, [pc, #220]	; (8003900 <HAL_GPIO_Init+0x2dc>)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	3302      	adds	r3, #2
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003830:	4b38      	ldr	r3, [pc, #224]	; (8003914 <HAL_GPIO_Init+0x2f0>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	43db      	mvns	r3, r3
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003854:	4a2f      	ldr	r2, [pc, #188]	; (8003914 <HAL_GPIO_Init+0x2f0>)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800385a:	4b2e      	ldr	r3, [pc, #184]	; (8003914 <HAL_GPIO_Init+0x2f0>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800387e:	4a25      	ldr	r2, [pc, #148]	; (8003914 <HAL_GPIO_Init+0x2f0>)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003884:	4b23      	ldr	r3, [pc, #140]	; (8003914 <HAL_GPIO_Init+0x2f0>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	43db      	mvns	r3, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4013      	ands	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038a8:	4a1a      	ldr	r2, [pc, #104]	; (8003914 <HAL_GPIO_Init+0x2f0>)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038ae:	4b19      	ldr	r3, [pc, #100]	; (8003914 <HAL_GPIO_Init+0x2f0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038d2:	4a10      	ldr	r2, [pc, #64]	; (8003914 <HAL_GPIO_Init+0x2f0>)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	3301      	adds	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f47f aea3 	bne.w	8003634 <HAL_GPIO_Init+0x10>
  }
}
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40021000 	.word	0x40021000
 8003900:	40010000 	.word	0x40010000
 8003904:	48000400 	.word	0x48000400
 8003908:	48000800 	.word	0x48000800
 800390c:	48000c00 	.word	0x48000c00
 8003910:	48001000 	.word	0x48001000
 8003914:	40010400 	.word	0x40010400

08003918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
 8003924:	4613      	mov	r3, r2
 8003926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003928:	787b      	ldrb	r3, [r7, #1]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003934:	e002      	b.n	800393c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4013      	ands	r3, r2
 8003960:	041a      	lsls	r2, r3, #16
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	43d9      	mvns	r1, r3
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	400b      	ands	r3, r1
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	619a      	str	r2, [r3, #24]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e08d      	b.n	8003aaa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fc ffbe 	bl	8000924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	; 0x24
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d107      	bne.n	80039f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	e006      	b.n	8003a04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d108      	bne.n	8003a1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	e007      	b.n	8003a2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69d9      	ldr	r1, [r3, #28]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	817b      	strh	r3, [r7, #10]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	f040 80fd 	bne.w	8003cd0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_I2C_Master_Transmit+0x30>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e0f6      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x21e>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003aec:	f7fd fcb2 	bl	8001454 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	2319      	movs	r3, #25
 8003af8:	2201      	movs	r2, #1
 8003afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fe3d 	bl	800477e <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e0e1      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2221      	movs	r2, #33	; 0x21
 8003b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2210      	movs	r2, #16
 8003b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	893a      	ldrh	r2, [r7, #8]
 8003b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2bff      	cmp	r3, #255	; 0xff
 8003b3e:	d906      	bls.n	8003b4e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	22ff      	movs	r2, #255	; 0xff
 8003b44:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003b46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e007      	b.n	8003b5e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003b58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b5c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d024      	beq.n	8003bb0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	781a      	ldrb	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	8979      	ldrh	r1, [r7, #10]
 8003ba2:	4b4e      	ldr	r3, [pc, #312]	; (8003cdc <HAL_I2C_Master_Transmit+0x228>)
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 ffa1 	bl	8004af0 <I2C_TransferConfig>
 8003bae:	e066      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	8979      	ldrh	r1, [r7, #10]
 8003bb8:	4b48      	ldr	r3, [pc, #288]	; (8003cdc <HAL_I2C_Master_Transmit+0x228>)
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 ff96 	bl	8004af0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003bc4:	e05b      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	6a39      	ldr	r1, [r7, #32]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fe26 	bl	800481c <I2C_WaitOnTXISFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e07b      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d034      	beq.n	8003c7e <HAL_I2C_Master_Transmit+0x1ca>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d130      	bne.n	8003c7e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	2200      	movs	r2, #0
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fda9 	bl	800477e <I2C_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e04d      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2bff      	cmp	r3, #255	; 0xff
 8003c3e:	d90e      	bls.n	8003c5e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	22ff      	movs	r2, #255	; 0xff
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	8979      	ldrh	r1, [r7, #10]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 ff4a 	bl	8004af0 <I2C_TransferConfig>
 8003c5c:	e00f      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	8979      	ldrh	r1, [r7, #10]
 8003c70:	2300      	movs	r3, #0
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 ff39 	bl	8004af0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d19e      	bne.n	8003bc6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	6a39      	ldr	r1, [r7, #32]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fe0c 	bl	80048aa <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e01a      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_I2C_Master_Transmit+0x22c>)
 8003cb0:	400b      	ands	r3, r1
 8003cb2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	80002000 	.word	0x80002000
 8003ce0:	fe00e800 	.word	0xfe00e800

08003ce4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	68f9      	ldr	r1, [r7, #12]
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4798      	blx	r3
  }
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00f      	beq.n	8003d5a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	f043 0201 	orr.w	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d58:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00f      	beq.n	8003d84 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	f043 0208 	orr.w	r2, r3, #8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d82:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00f      	beq.n	8003dae <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9c:	f043 0202 	orr.w	r2, r3, #2
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 030b 	and.w	r3, r3, #11
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003dbe:	68f9      	ldr	r1, [r7, #12]
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fb83 	bl	80044cc <I2C_ITError>
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	70fb      	strb	r3, [r7, #3]
 8003e02:	4613      	mov	r3, r2
 8003e04:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <I2C_Slave_ISR_IT+0x24>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e0e1      	b.n	8004036 <I2C_Slave_ISR_IT+0x1e8>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003e8e:	6939      	ldr	r1, [r7, #16]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f9b5 	bl	8004200 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d04b      	beq.n	8003f38 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d046      	beq.n	8003f38 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d128      	bne.n	8003f06 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b28      	cmp	r3, #40	; 0x28
 8003ebe:	d108      	bne.n	8003ed2 <I2C_Slave_ISR_IT+0x84>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ec6:	d104      	bne.n	8003ed2 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ec8:	6939      	ldr	r1, [r7, #16]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 faaa 	bl	8004424 <I2C_ITListenCplt>
 8003ed0:	e031      	b.n	8003f36 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b29      	cmp	r3, #41	; 0x29
 8003edc:	d10e      	bne.n	8003efc <I2C_Slave_ISR_IT+0xae>
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee4:	d00a      	beq.n	8003efc <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2210      	movs	r2, #16
 8003eec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fc03 	bl	80046fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f926 	bl	8004146 <I2C_ITSlaveSeqCplt>
 8003efa:	e01c      	b.n	8003f36 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2210      	movs	r2, #16
 8003f02:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003f04:	e08f      	b.n	8004026 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	f043 0204 	orr.w	r2, r3, #4
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <I2C_Slave_ISR_IT+0xda>
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f26:	d17e      	bne.n	8004026 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 facc 	bl	80044cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f34:	e077      	b.n	8004026 <I2C_Slave_ISR_IT+0x1d8>
 8003f36:	e076      	b.n	8004026 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d02f      	beq.n	8003fa2 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d02a      	beq.n	8003fa2 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d018      	beq.n	8003f88 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d14b      	bne.n	800402a <I2C_Slave_ISR_IT+0x1dc>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f98:	d047      	beq.n	800402a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f8d3 	bl	8004146 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003fa0:	e043      	b.n	800402a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003fb6:	6939      	ldr	r1, [r7, #16]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f840 	bl	800403e <I2C_ITAddrCplt>
 8003fbe:	e035      	b.n	800402c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d030      	beq.n	800402c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d02b      	beq.n	800402c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d018      	beq.n	8004010 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	781a      	ldrb	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	; 0x28
 800400e:	e00d      	b.n	800402c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004016:	d002      	beq.n	800401e <I2C_Slave_ISR_IT+0x1d0>
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f891 	bl	8004146 <I2C_ITSlaveSeqCplt>
 8004024:	e002      	b.n	800402c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004026:	bf00      	nop
 8004028:	e000      	b.n	800402c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800402a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404e:	b2db      	uxtb	r3, r3
 8004050:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004054:	2b28      	cmp	r3, #40	; 0x28
 8004056:	d16a      	bne.n	800412e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	0c1b      	lsrs	r3, r3, #16
 8004070:	b29b      	uxth	r3, r3
 8004072:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004076:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004084:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004092:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d138      	bne.n	800410e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800409c:	897b      	ldrh	r3, [r7, #10]
 800409e:	09db      	lsrs	r3, r3, #7
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	89bb      	ldrh	r3, [r7, #12]
 80040a4:	4053      	eors	r3, r2
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f003 0306 	and.w	r3, r3, #6
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d11c      	bne.n	80040ea <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80040b0:	897b      	ldrh	r3, [r7, #10]
 80040b2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d13b      	bne.n	800413e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2208      	movs	r2, #8
 80040d2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040dc:	89ba      	ldrh	r2, [r7, #12]
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	4619      	mov	r1, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fe87 	bl	8003df6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040e8:	e029      	b.n	800413e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80040ea:	893b      	ldrh	r3, [r7, #8]
 80040ec:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80040ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fd2e 	bl	8004b54 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004100:	89ba      	ldrh	r2, [r7, #12]
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff fe75 	bl	8003df6 <HAL_I2C_AddrCallback>
}
 800410c:	e017      	b.n	800413e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800410e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fd1e 	bl	8004b54 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004120:	89ba      	ldrh	r2, [r7, #12]
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	4619      	mov	r1, r3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff fe65 	bl	8003df6 <HAL_I2C_AddrCallback>
}
 800412c:	e007      	b.n	800413e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2208      	movs	r2, #8
 8004134:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e00c      	b.n	8004194 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004192:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b29      	cmp	r3, #41	; 0x29
 800419e:	d112      	bne.n	80041c6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2228      	movs	r2, #40	; 0x28
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2221      	movs	r2, #33	; 0x21
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80041ae:	2101      	movs	r1, #1
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fccf 	bl	8004b54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff fe05 	bl	8003dce <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80041c4:	e017      	b.n	80041f6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b2a      	cmp	r3, #42	; 0x2a
 80041d0:	d111      	bne.n	80041f6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2228      	movs	r2, #40	; 0x28
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2222      	movs	r2, #34	; 0x22
 80041de:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80041e0:	2102      	movs	r1, #2
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fcb6 	bl	8004b54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff fdf6 	bl	8003de2 <HAL_I2C_SlaveRxCpltCallback>
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2220      	movs	r2, #32
 8004224:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	2b21      	cmp	r3, #33	; 0x21
 800422a:	d002      	beq.n	8004232 <I2C_ITSlaveCplt+0x32>
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b29      	cmp	r3, #41	; 0x29
 8004230:	d108      	bne.n	8004244 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004232:	f248 0101 	movw	r1, #32769	; 0x8001
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fc8c 	bl	8004b54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2221      	movs	r2, #33	; 0x21
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
 8004242:	e019      	b.n	8004278 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	2b22      	cmp	r3, #34	; 0x22
 8004248:	d002      	beq.n	8004250 <I2C_ITSlaveCplt+0x50>
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	2b2a      	cmp	r3, #42	; 0x2a
 800424e:	d108      	bne.n	8004262 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004250:	f248 0102 	movw	r1, #32770	; 0x8002
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fc7d 	bl	8004b54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2222      	movs	r2, #34	; 0x22
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
 8004260:	e00a      	b.n	8004278 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b28      	cmp	r3, #40	; 0x28
 8004266:	d107      	bne.n	8004278 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004268:	f248 0103 	movw	r1, #32771	; 0x8003
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fc71 	bl	8004b54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004286:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4b62      	ldr	r3, [pc, #392]	; (800441c <I2C_ITSlaveCplt+0x21c>)
 8004294:	400b      	ands	r3, r1
 8004296:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fa2e 	bl	80046fa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d013      	beq.n	80042d0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01f      	beq.n	8004300 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042ce:	e017      	b.n	8004300 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d012      	beq.n	8004300 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042e8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d006      	beq.n	8004300 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	d020      	beq.n	800434c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 0304 	bic.w	r3, r3, #4
 8004310:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00c      	beq.n	800434c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f043 0204 	orr.w	r2, r3, #4
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004374:	2b00      	cmp	r3, #0
 8004376:	d010      	beq.n	800439a <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8a4 	bl	80044cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b28      	cmp	r3, #40	; 0x28
 800438e:	d141      	bne.n	8004414 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004390:	6979      	ldr	r1, [r7, #20]
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f846 	bl	8004424 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004398:	e03c      	b.n	8004414 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043a2:	d014      	beq.n	80043ce <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff fece 	bl	8004146 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <I2C_ITSlaveCplt+0x220>)
 80043ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fd23 	bl	8003e12 <HAL_I2C_ListenCpltCallback>
}
 80043cc:	e022      	b.n	8004414 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b22      	cmp	r3, #34	; 0x22
 80043d8:	d10e      	bne.n	80043f8 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff fcf6 	bl	8003de2 <HAL_I2C_SlaveRxCpltCallback>
}
 80043f6:	e00d      	b.n	8004414 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fcdd 	bl	8003dce <HAL_I2C_SlaveTxCpltCallback>
}
 8004414:	bf00      	nop
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	fe00e800 	.word	0xfe00e800
 8004420:	ffff0000 	.word	0xffff0000

08004424 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a25      	ldr	r2, [pc, #148]	; (80044c8 <I2C_ITListenCplt+0xa4>)
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d022      	beq.n	80044a0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004476:	2b00      	cmp	r3, #0
 8004478:	d012      	beq.n	80044a0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004498:	f043 0204 	orr.w	r2, r3, #4
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80044a0:	f248 0103 	movw	r1, #32771	; 0x8003
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fb55 	bl	8004b54 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2210      	movs	r2, #16
 80044b0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff fca9 	bl	8003e12 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	ffff0000 	.word	0xffff0000

080044cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044dc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a6d      	ldr	r2, [pc, #436]	; (80046a0 <I2C_ITError+0x1d4>)
 80044ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b28      	cmp	r3, #40	; 0x28
 8004502:	d005      	beq.n	8004510 <I2C_ITError+0x44>
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b29      	cmp	r3, #41	; 0x29
 8004508:	d002      	beq.n	8004510 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b2a      	cmp	r3, #42	; 0x2a
 800450e:	d10b      	bne.n	8004528 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004510:	2103      	movs	r1, #3
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fb1e 	bl	8004b54 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2228      	movs	r2, #40	; 0x28
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a60      	ldr	r2, [pc, #384]	; (80046a4 <I2C_ITError+0x1d8>)
 8004524:	635a      	str	r2, [r3, #52]	; 0x34
 8004526:	e030      	b.n	800458a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004528:	f248 0103 	movw	r1, #32771	; 0x8003
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fb11 	bl	8004b54 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f8e1 	bl	80046fa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b60      	cmp	r3, #96	; 0x60
 8004542:	d01f      	beq.n	8004584 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b20      	cmp	r3, #32
 8004558:	d114      	bne.n	8004584 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b10      	cmp	r3, #16
 8004566:	d109      	bne.n	800457c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2210      	movs	r2, #16
 800456e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	f043 0204 	orr.w	r2, r3, #4
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2220      	movs	r2, #32
 8004582:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	2b00      	cmp	r3, #0
 8004596:	d039      	beq.n	800460c <I2C_ITError+0x140>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b11      	cmp	r3, #17
 800459c:	d002      	beq.n	80045a4 <I2C_ITError+0xd8>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b21      	cmp	r3, #33	; 0x21
 80045a2:	d133      	bne.n	800460c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045b2:	d107      	bne.n	80045c4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe ffed 	bl	80035a8 <HAL_DMA_GetState>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d017      	beq.n	8004604 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	4a33      	ldr	r2, [pc, #204]	; (80046a8 <I2C_ITError+0x1dc>)
 80045da:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe feed 	bl	80033c8 <HAL_DMA_Abort_IT>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d04d      	beq.n	8004690 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045fe:	4610      	mov	r0, r2
 8004600:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004602:	e045      	b.n	8004690 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f851 	bl	80046ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800460a:	e041      	b.n	8004690 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d039      	beq.n	8004688 <I2C_ITError+0x1bc>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b12      	cmp	r3, #18
 8004618:	d002      	beq.n	8004620 <I2C_ITError+0x154>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b22      	cmp	r3, #34	; 0x22
 800461e:	d133      	bne.n	8004688 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800462a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462e:	d107      	bne.n	8004640 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800463e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe ffaf 	bl	80035a8 <HAL_DMA_GetState>
 800464a:	4603      	mov	r3, r0
 800464c:	2b01      	cmp	r3, #1
 800464e:	d017      	beq.n	8004680 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <I2C_ITError+0x1dc>)
 8004656:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004664:	4618      	mov	r0, r3
 8004666:	f7fe feaf 	bl	80033c8 <HAL_DMA_Abort_IT>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d011      	beq.n	8004694 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800467a:	4610      	mov	r0, r2
 800467c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800467e:	e009      	b.n	8004694 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f813 	bl	80046ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004686:	e005      	b.n	8004694 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f80f 	bl	80046ac <I2C_TreatErrorCallback>
  }
}
 800468e:	e002      	b.n	8004696 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004690:	bf00      	nop
 8004692:	e000      	b.n	8004696 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004694:	bf00      	nop
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	ffff0000 	.word	0xffff0000
 80046a4:	08003e4f 	.word	0x08003e4f
 80046a8:	08004743 	.word	0x08004743

080046ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b60      	cmp	r3, #96	; 0x60
 80046be:	d10e      	bne.n	80046de <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fbaf 	bl	8003e3a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046dc:	e009      	b.n	80046f2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff fb9a 	bl	8003e26 <HAL_I2C_ErrorCallback>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b02      	cmp	r3, #2
 800470e:	d103      	bne.n	8004718 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2200      	movs	r2, #0
 8004716:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b01      	cmp	r3, #1
 8004724:	d007      	beq.n	8004736 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	619a      	str	r2, [r3, #24]
  }
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	2200      	movs	r2, #0
 800475e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	2200      	movs	r2, #0
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff ff9b 	bl	80046ac <I2C_TreatErrorCallback>
}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	4613      	mov	r3, r2
 800478c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800478e:	e031      	b.n	80047f4 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d02d      	beq.n	80047f4 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004798:	f7fc fe5c 	bl	8001454 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d302      	bcc.n	80047ae <I2C_WaitOnFlagUntilTimeout+0x30>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d122      	bne.n	80047f4 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d113      	bne.n	80047f4 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e00f      	b.n	8004814 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4013      	ands	r3, r2
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	429a      	cmp	r2, r3
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	429a      	cmp	r2, r3
 8004810:	d0be      	beq.n	8004790 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004828:	e033      	b.n	8004892 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f87e 	bl	8004930 <I2C_IsErrorOccurred>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e031      	b.n	80048a2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d025      	beq.n	8004892 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7fc fe05 	bl	8001454 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d11a      	bne.n	8004892 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	d013      	beq.n	8004892 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f043 0220 	orr.w	r2, r3, #32
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e007      	b.n	80048a2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b02      	cmp	r3, #2
 800489e:	d1c4      	bne.n	800482a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048b6:	e02f      	b.n	8004918 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f837 	bl	8004930 <I2C_IsErrorOccurred>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e02d      	b.n	8004928 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048cc:	f7fc fdc2 	bl	8001454 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d302      	bcc.n	80048e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d11a      	bne.n	8004918 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d013      	beq.n	8004918 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	f043 0220 	orr.w	r2, r3, #32
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e007      	b.n	8004928 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b20      	cmp	r3, #32
 8004924:	d1c8      	bne.n	80048b8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	; 0x28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800494a:	2300      	movs	r3, #0
 800494c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	d068      	beq.n	8004a2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2210      	movs	r2, #16
 8004962:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004964:	e049      	b.n	80049fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d045      	beq.n	80049fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800496e:	f7fc fd71 	bl	8001454 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <I2C_IsErrorOccurred+0x54>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d13a      	bne.n	80049fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004996:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a6:	d121      	bne.n	80049ec <I2C_IsErrorOccurred+0xbc>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ae:	d01d      	beq.n	80049ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80049b0:	7cfb      	ldrb	r3, [r7, #19]
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d01a      	beq.n	80049ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80049c6:	f7fc fd45 	bl	8001454 <HAL_GetTick>
 80049ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049cc:	e00e      	b.n	80049ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80049ce:	f7fc fd41 	bl	8001454 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b19      	cmp	r3, #25
 80049da:	d907      	bls.n	80049ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	f043 0320 	orr.w	r3, r3, #32
 80049e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80049ea:	e006      	b.n	80049fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b20      	cmp	r3, #32
 80049f8:	d1e9      	bne.n	80049ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d003      	beq.n	8004a10 <I2C_IsErrorOccurred+0xe0>
 8004a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0aa      	beq.n	8004966 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d103      	bne.n	8004a20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	f043 0304 	orr.w	r3, r3, #4
 8004a26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00b      	beq.n	8004a58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	f043 0308 	orr.w	r3, r3, #8
 8004a68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	f043 0302 	orr.w	r3, r3, #2
 8004a8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01c      	beq.n	8004ade <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff fe28 	bl	80046fa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6859      	ldr	r1, [r3, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <I2C_IsErrorOccurred+0x1bc>)
 8004ab6:	400b      	ands	r3, r1
 8004ab8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3728      	adds	r7, #40	; 0x28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	fe00e800 	.word	0xfe00e800

08004af0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	460b      	mov	r3, r1
 8004afc:	817b      	strh	r3, [r7, #10]
 8004afe:	4613      	mov	r3, r2
 8004b00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b02:	897b      	ldrh	r3, [r7, #10]
 8004b04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b08:	7a7b      	ldrb	r3, [r7, #9]
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	0d5b      	lsrs	r3, r3, #21
 8004b2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <I2C_TransferConfig+0x60>)
 8004b30:	430b      	orrs	r3, r1
 8004b32:	43db      	mvns	r3, r3
 8004b34:	ea02 0103 	and.w	r1, r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	03ff63ff 	.word	0x03ff63ff

08004b54 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b64:	887b      	ldrh	r3, [r7, #2]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00f      	beq.n	8004b8e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004b74:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b82:	2b28      	cmp	r3, #40	; 0x28
 8004b84:	d003      	beq.n	8004b8e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004b8c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b8e:	887b      	ldrh	r3, [r7, #2]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00f      	beq.n	8004bb8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004b9e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bac:	2b28      	cmp	r3, #40	; 0x28
 8004bae:	d003      	beq.n	8004bb8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004bb6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004bb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	da03      	bge.n	8004bc8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004bc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004bc8:	887b      	ldrh	r3, [r7, #2]
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d103      	bne.n	8004bd6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004bd4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004bd6:	887b      	ldrh	r3, [r7, #2]
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d103      	bne.n	8004be4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f043 0320 	orr.w	r3, r3, #32
 8004be2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004be4:	887b      	ldrh	r3, [r7, #2]
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d103      	bne.n	8004bf2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bf0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6819      	ldr	r1, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	43da      	mvns	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	400a      	ands	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d138      	bne.n	8004c98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e032      	b.n	8004c9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	; 0x24
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6819      	ldr	r1, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	e000      	b.n	8004c9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
  }
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d139      	bne.n	8004d30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e033      	b.n	8004d32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2224      	movs	r2, #36	; 0x24
 8004cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cf8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e000      	b.n	8004d32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
	...

08004d40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40007000 	.word	0x40007000

08004d5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6a:	d130      	bne.n	8004dce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d6c:	4b23      	ldr	r3, [pc, #140]	; (8004dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d78:	d038      	beq.n	8004dec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d7a:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d82:	4a1e      	ldr	r2, [pc, #120]	; (8004dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d8a:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2232      	movs	r2, #50	; 0x32
 8004d90:	fb02 f303 	mul.w	r3, r2, r3
 8004d94:	4a1b      	ldr	r2, [pc, #108]	; (8004e04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	0c9b      	lsrs	r3, r3, #18
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004da0:	e002      	b.n	8004da8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004da8:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db4:	d102      	bne.n	8004dbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f2      	bne.n	8004da2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dbc:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc8:	d110      	bne.n	8004dec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e00f      	b.n	8004dee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dce:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dda:	d007      	beq.n	8004dec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ddc:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004de4:	4a05      	ldr	r2, [pc, #20]	; (8004dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40007000 	.word	0x40007000
 8004e00:	20000008 	.word	0x20000008
 8004e04:	431bde83 	.word	0x431bde83

08004e08 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f000 bc02 	b.w	8005620 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e1c:	4b96      	ldr	r3, [pc, #600]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 030c 	and.w	r3, r3, #12
 8004e24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e26:	4b94      	ldr	r3, [pc, #592]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80e4 	beq.w	8005006 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <HAL_RCC_OscConfig+0x4c>
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b0c      	cmp	r3, #12
 8004e48:	f040 808b 	bne.w	8004f62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	f040 8087 	bne.w	8004f62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e54:	4b88      	ldr	r3, [pc, #544]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_RCC_OscConfig+0x64>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e3d9      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1a      	ldr	r2, [r3, #32]
 8004e70:	4b81      	ldr	r3, [pc, #516]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d004      	beq.n	8004e86 <HAL_RCC_OscConfig+0x7e>
 8004e7c:	4b7e      	ldr	r3, [pc, #504]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e84:	e005      	b.n	8004e92 <HAL_RCC_OscConfig+0x8a>
 8004e86:	4b7c      	ldr	r3, [pc, #496]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d223      	bcs.n	8004ede <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fd54 	bl	8005948 <RCC_SetFlashLatencyFromMSIRange>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e3ba      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eaa:	4b73      	ldr	r3, [pc, #460]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a72      	ldr	r2, [pc, #456]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004eb0:	f043 0308 	orr.w	r3, r3, #8
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	4b70      	ldr	r3, [pc, #448]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	496d      	ldr	r1, [pc, #436]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ec8:	4b6b      	ldr	r3, [pc, #428]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	4968      	ldr	r1, [pc, #416]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	604b      	str	r3, [r1, #4]
 8004edc:	e025      	b.n	8004f2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ede:	4b66      	ldr	r3, [pc, #408]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a65      	ldr	r2, [pc, #404]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004ee4:	f043 0308 	orr.w	r3, r3, #8
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	4b63      	ldr	r3, [pc, #396]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	4960      	ldr	r1, [pc, #384]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004efc:	4b5e      	ldr	r3, [pc, #376]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	495b      	ldr	r1, [pc, #364]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fd14 	bl	8005948 <RCC_SetFlashLatencyFromMSIRange>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e37a      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f2a:	f000 fc81 	bl	8005830 <HAL_RCC_GetSysClockFreq>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	4b51      	ldr	r3, [pc, #324]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	4950      	ldr	r1, [pc, #320]	; (800507c <HAL_RCC_OscConfig+0x274>)
 8004f3c:	5ccb      	ldrb	r3, [r1, r3]
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	fa22 f303 	lsr.w	r3, r2, r3
 8004f46:	4a4e      	ldr	r2, [pc, #312]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004f48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f4a:	4b4e      	ldr	r3, [pc, #312]	; (8005084 <HAL_RCC_OscConfig+0x27c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fc fa30 	bl	80013b4 <HAL_InitTick>
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d052      	beq.n	8005004 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	e35e      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d032      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f6a:	4b43      	ldr	r3, [pc, #268]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a42      	ldr	r2, [pc, #264]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f76:	f7fc fa6d 	bl	8001454 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f7e:	f7fc fa69 	bl	8001454 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e347      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f90:	4b39      	ldr	r3, [pc, #228]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f9c:	4b36      	ldr	r3, [pc, #216]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a35      	ldr	r2, [pc, #212]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004fa2:	f043 0308 	orr.w	r3, r3, #8
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	4b33      	ldr	r3, [pc, #204]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	4930      	ldr	r1, [pc, #192]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fba:	4b2f      	ldr	r3, [pc, #188]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	492b      	ldr	r1, [pc, #172]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	604b      	str	r3, [r1, #4]
 8004fce:	e01a      	b.n	8005006 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fd0:	4b29      	ldr	r3, [pc, #164]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a28      	ldr	r2, [pc, #160]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004fd6:	f023 0301 	bic.w	r3, r3, #1
 8004fda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fdc:	f7fc fa3a 	bl	8001454 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fe4:	f7fc fa36 	bl	8001454 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e314      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ff6:	4b20      	ldr	r3, [pc, #128]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x1dc>
 8005002:	e000      	b.n	8005006 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005004:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d073      	beq.n	80050fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d005      	beq.n	8005024 <HAL_RCC_OscConfig+0x21c>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d10e      	bne.n	800503c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b03      	cmp	r3, #3
 8005022:	d10b      	bne.n	800503c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005024:	4b14      	ldr	r3, [pc, #80]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d063      	beq.n	80050f8 <HAL_RCC_OscConfig+0x2f0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d15f      	bne.n	80050f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e2f1      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d106      	bne.n	8005054 <HAL_RCC_OscConfig+0x24c>
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a0b      	ldr	r2, [pc, #44]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e025      	b.n	80050a0 <HAL_RCC_OscConfig+0x298>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800505c:	d114      	bne.n	8005088 <HAL_RCC_OscConfig+0x280>
 800505e:	4b06      	ldr	r3, [pc, #24]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a05      	ldr	r2, [pc, #20]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8005064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	4b03      	ldr	r3, [pc, #12]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a02      	ldr	r2, [pc, #8]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8005070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e013      	b.n	80050a0 <HAL_RCC_OscConfig+0x298>
 8005078:	40021000 	.word	0x40021000
 800507c:	08007208 	.word	0x08007208
 8005080:	20000008 	.word	0x20000008
 8005084:	2000000c 	.word	0x2000000c
 8005088:	4ba0      	ldr	r3, [pc, #640]	; (800530c <HAL_RCC_OscConfig+0x504>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a9f      	ldr	r2, [pc, #636]	; (800530c <HAL_RCC_OscConfig+0x504>)
 800508e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	4b9d      	ldr	r3, [pc, #628]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a9c      	ldr	r2, [pc, #624]	; (800530c <HAL_RCC_OscConfig+0x504>)
 800509a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d013      	beq.n	80050d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a8:	f7fc f9d4 	bl	8001454 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b0:	f7fc f9d0 	bl	8001454 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e2ae      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c2:	4b92      	ldr	r3, [pc, #584]	; (800530c <HAL_RCC_OscConfig+0x504>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0x2a8>
 80050ce:	e014      	b.n	80050fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fc f9c0 	bl	8001454 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fc f9bc 	bl	8001454 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e29a      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ea:	4b88      	ldr	r3, [pc, #544]	; (800530c <HAL_RCC_OscConfig+0x504>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x2d0>
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d060      	beq.n	80051c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d005      	beq.n	8005118 <HAL_RCC_OscConfig+0x310>
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2b0c      	cmp	r3, #12
 8005110:	d119      	bne.n	8005146 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d116      	bne.n	8005146 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005118:	4b7c      	ldr	r3, [pc, #496]	; (800530c <HAL_RCC_OscConfig+0x504>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <HAL_RCC_OscConfig+0x328>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e277      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005130:	4b76      	ldr	r3, [pc, #472]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	061b      	lsls	r3, r3, #24
 800513e:	4973      	ldr	r1, [pc, #460]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005140:	4313      	orrs	r3, r2
 8005142:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005144:	e040      	b.n	80051c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d023      	beq.n	8005196 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800514e:	4b6f      	ldr	r3, [pc, #444]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a6e      	ldr	r2, [pc, #440]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515a:	f7fc f97b 	bl	8001454 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005162:	f7fc f977 	bl	8001454 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e255      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005174:	4b65      	ldr	r3, [pc, #404]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0f0      	beq.n	8005162 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005180:	4b62      	ldr	r3, [pc, #392]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	061b      	lsls	r3, r3, #24
 800518e:	495f      	ldr	r1, [pc, #380]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005190:	4313      	orrs	r3, r2
 8005192:	604b      	str	r3, [r1, #4]
 8005194:	e018      	b.n	80051c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005196:	4b5d      	ldr	r3, [pc, #372]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a5c      	ldr	r2, [pc, #368]	; (800530c <HAL_RCC_OscConfig+0x504>)
 800519c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fc f957 	bl	8001454 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051aa:	f7fc f953 	bl	8001454 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e231      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051bc:	4b53      	ldr	r3, [pc, #332]	; (800530c <HAL_RCC_OscConfig+0x504>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f0      	bne.n	80051aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d03c      	beq.n	800524e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01c      	beq.n	8005216 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051dc:	4b4b      	ldr	r3, [pc, #300]	; (800530c <HAL_RCC_OscConfig+0x504>)
 80051de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051e2:	4a4a      	ldr	r2, [pc, #296]	; (800530c <HAL_RCC_OscConfig+0x504>)
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ec:	f7fc f932 	bl	8001454 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f4:	f7fc f92e 	bl	8001454 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e20c      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005206:	4b41      	ldr	r3, [pc, #260]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0ef      	beq.n	80051f4 <HAL_RCC_OscConfig+0x3ec>
 8005214:	e01b      	b.n	800524e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005216:	4b3d      	ldr	r3, [pc, #244]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800521c:	4a3b      	ldr	r2, [pc, #236]	; (800530c <HAL_RCC_OscConfig+0x504>)
 800521e:	f023 0301 	bic.w	r3, r3, #1
 8005222:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005226:	f7fc f915 	bl	8001454 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800522e:	f7fc f911 	bl	8001454 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e1ef      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005240:	4b32      	ldr	r3, [pc, #200]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1ef      	bne.n	800522e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80a6 	beq.w	80053a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800525c:	2300      	movs	r3, #0
 800525e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005260:	4b2a      	ldr	r3, [pc, #168]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10d      	bne.n	8005288 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526c:	4b27      	ldr	r3, [pc, #156]	; (800530c <HAL_RCC_OscConfig+0x504>)
 800526e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005270:	4a26      	ldr	r2, [pc, #152]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005276:	6593      	str	r3, [r2, #88]	; 0x58
 8005278:	4b24      	ldr	r3, [pc, #144]	; (800530c <HAL_RCC_OscConfig+0x504>)
 800527a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005280:	60bb      	str	r3, [r7, #8]
 8005282:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005284:	2301      	movs	r3, #1
 8005286:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005288:	4b21      	ldr	r3, [pc, #132]	; (8005310 <HAL_RCC_OscConfig+0x508>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d118      	bne.n	80052c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005294:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <HAL_RCC_OscConfig+0x508>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <HAL_RCC_OscConfig+0x508>)
 800529a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a0:	f7fc f8d8 	bl	8001454 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a8:	f7fc f8d4 	bl	8001454 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e1b2      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <HAL_RCC_OscConfig+0x508>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d108      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4d8>
 80052ce:	4b0f      	ldr	r3, [pc, #60]	; (800530c <HAL_RCC_OscConfig+0x504>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	4a0d      	ldr	r2, [pc, #52]	; (800530c <HAL_RCC_OscConfig+0x504>)
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052de:	e029      	b.n	8005334 <HAL_RCC_OscConfig+0x52c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b05      	cmp	r3, #5
 80052e6:	d115      	bne.n	8005314 <HAL_RCC_OscConfig+0x50c>
 80052e8:	4b08      	ldr	r3, [pc, #32]	; (800530c <HAL_RCC_OscConfig+0x504>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ee:	4a07      	ldr	r2, [pc, #28]	; (800530c <HAL_RCC_OscConfig+0x504>)
 80052f0:	f043 0304 	orr.w	r3, r3, #4
 80052f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052f8:	4b04      	ldr	r3, [pc, #16]	; (800530c <HAL_RCC_OscConfig+0x504>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fe:	4a03      	ldr	r2, [pc, #12]	; (800530c <HAL_RCC_OscConfig+0x504>)
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005308:	e014      	b.n	8005334 <HAL_RCC_OscConfig+0x52c>
 800530a:	bf00      	nop
 800530c:	40021000 	.word	0x40021000
 8005310:	40007000 	.word	0x40007000
 8005314:	4b9a      	ldr	r3, [pc, #616]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531a:	4a99      	ldr	r2, [pc, #612]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005324:	4b96      	ldr	r3, [pc, #600]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532a:	4a95      	ldr	r2, [pc, #596]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 800532c:	f023 0304 	bic.w	r3, r3, #4
 8005330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d016      	beq.n	800536a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533c:	f7fc f88a 	bl	8001454 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005342:	e00a      	b.n	800535a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005344:	f7fc f886 	bl	8001454 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e162      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800535a:	4b89      	ldr	r3, [pc, #548]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0ed      	beq.n	8005344 <HAL_RCC_OscConfig+0x53c>
 8005368:	e015      	b.n	8005396 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536a:	f7fc f873 	bl	8001454 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005370:	e00a      	b.n	8005388 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7fc f86f 	bl	8001454 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005380:	4293      	cmp	r3, r2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e14b      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005388:	4b7d      	ldr	r3, [pc, #500]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1ed      	bne.n	8005372 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005396:	7ffb      	ldrb	r3, [r7, #31]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d105      	bne.n	80053a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539c:	4b78      	ldr	r3, [pc, #480]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 800539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a0:	4a77      	ldr	r2, [pc, #476]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 80053a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d03c      	beq.n	800542e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01c      	beq.n	80053f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053bc:	4b70      	ldr	r3, [pc, #448]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 80053be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053c2:	4a6f      	ldr	r2, [pc, #444]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053cc:	f7fc f842 	bl	8001454 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053d4:	f7fc f83e 	bl	8001454 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e11c      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053e6:	4b66      	ldr	r3, [pc, #408]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 80053e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ef      	beq.n	80053d4 <HAL_RCC_OscConfig+0x5cc>
 80053f4:	e01b      	b.n	800542e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053f6:	4b62      	ldr	r3, [pc, #392]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 80053f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053fc:	4a60      	ldr	r2, [pc, #384]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005406:	f7fc f825 	bl	8001454 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800540e:	f7fc f821 	bl	8001454 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e0ff      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005420:	4b57      	ldr	r3, [pc, #348]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 8005422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1ef      	bne.n	800540e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80f3 	beq.w	800561e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	2b02      	cmp	r3, #2
 800543e:	f040 80c9 	bne.w	80055d4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005442:	4b4f      	ldr	r3, [pc, #316]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f003 0203 	and.w	r2, r3, #3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	429a      	cmp	r2, r3
 8005454:	d12c      	bne.n	80054b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	3b01      	subs	r3, #1
 8005462:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005464:	429a      	cmp	r2, r3
 8005466:	d123      	bne.n	80054b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005472:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d11b      	bne.n	80054b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005484:	429a      	cmp	r2, r3
 8005486:	d113      	bne.n	80054b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	3b01      	subs	r3, #1
 8005496:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d109      	bne.n	80054b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	085b      	lsrs	r3, r3, #1
 80054a8:	3b01      	subs	r3, #1
 80054aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d06b      	beq.n	8005588 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b0c      	cmp	r3, #12
 80054b4:	d062      	beq.n	800557c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054b6:	4b32      	ldr	r3, [pc, #200]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e0ac      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054c6:	4b2e      	ldr	r3, [pc, #184]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 80054cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054d2:	f7fb ffbf 	bl	8001454 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054da:	f7fb ffbb 	bl	8001454 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e099      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ec:	4b24      	ldr	r3, [pc, #144]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f0      	bne.n	80054da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054f8:	4b21      	ldr	r3, [pc, #132]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	4b21      	ldr	r3, [pc, #132]	; (8005584 <HAL_RCC_OscConfig+0x77c>)
 80054fe:	4013      	ands	r3, r2
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005508:	3a01      	subs	r2, #1
 800550a:	0112      	lsls	r2, r2, #4
 800550c:	4311      	orrs	r1, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005512:	0212      	lsls	r2, r2, #8
 8005514:	4311      	orrs	r1, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800551a:	0852      	lsrs	r2, r2, #1
 800551c:	3a01      	subs	r2, #1
 800551e:	0552      	lsls	r2, r2, #21
 8005520:	4311      	orrs	r1, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005526:	0852      	lsrs	r2, r2, #1
 8005528:	3a01      	subs	r2, #1
 800552a:	0652      	lsls	r2, r2, #25
 800552c:	4311      	orrs	r1, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005532:	06d2      	lsls	r2, r2, #27
 8005534:	430a      	orrs	r2, r1
 8005536:	4912      	ldr	r1, [pc, #72]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 8005538:	4313      	orrs	r3, r2
 800553a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a0f      	ldr	r2, [pc, #60]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 8005542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005546:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005548:	4b0d      	ldr	r3, [pc, #52]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4a0c      	ldr	r2, [pc, #48]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 800554e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005552:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005554:	f7fb ff7e 	bl	8001454 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800555c:	f7fb ff7a 	bl	8001454 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e058      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800556e:	4b04      	ldr	r3, [pc, #16]	; (8005580 <HAL_RCC_OscConfig+0x778>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f0      	beq.n	800555c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800557a:	e050      	b.n	800561e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e04f      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
 8005580:	40021000 	.word	0x40021000
 8005584:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005588:	4b27      	ldr	r3, [pc, #156]	; (8005628 <HAL_RCC_OscConfig+0x820>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d144      	bne.n	800561e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005594:	4b24      	ldr	r3, [pc, #144]	; (8005628 <HAL_RCC_OscConfig+0x820>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a23      	ldr	r2, [pc, #140]	; (8005628 <HAL_RCC_OscConfig+0x820>)
 800559a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800559e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055a0:	4b21      	ldr	r3, [pc, #132]	; (8005628 <HAL_RCC_OscConfig+0x820>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4a20      	ldr	r2, [pc, #128]	; (8005628 <HAL_RCC_OscConfig+0x820>)
 80055a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055ac:	f7fb ff52 	bl	8001454 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b4:	f7fb ff4e 	bl	8001454 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e02c      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055c6:	4b18      	ldr	r3, [pc, #96]	; (8005628 <HAL_RCC_OscConfig+0x820>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0x7ac>
 80055d2:	e024      	b.n	800561e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	2b0c      	cmp	r3, #12
 80055d8:	d01f      	beq.n	800561a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055da:	4b13      	ldr	r3, [pc, #76]	; (8005628 <HAL_RCC_OscConfig+0x820>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a12      	ldr	r2, [pc, #72]	; (8005628 <HAL_RCC_OscConfig+0x820>)
 80055e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e6:	f7fb ff35 	bl	8001454 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ee:	f7fb ff31 	bl	8001454 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e00f      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005600:	4b09      	ldr	r3, [pc, #36]	; (8005628 <HAL_RCC_OscConfig+0x820>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1f0      	bne.n	80055ee <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800560c:	4b06      	ldr	r3, [pc, #24]	; (8005628 <HAL_RCC_OscConfig+0x820>)
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	4905      	ldr	r1, [pc, #20]	; (8005628 <HAL_RCC_OscConfig+0x820>)
 8005612:	4b06      	ldr	r3, [pc, #24]	; (800562c <HAL_RCC_OscConfig+0x824>)
 8005614:	4013      	ands	r3, r2
 8005616:	60cb      	str	r3, [r1, #12]
 8005618:	e001      	b.n	800561e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3720      	adds	r7, #32
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40021000 	.word	0x40021000
 800562c:	feeefffc 	.word	0xfeeefffc

08005630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e0e7      	b.n	8005814 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005644:	4b75      	ldr	r3, [pc, #468]	; (800581c <HAL_RCC_ClockConfig+0x1ec>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d910      	bls.n	8005674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005652:	4b72      	ldr	r3, [pc, #456]	; (800581c <HAL_RCC_ClockConfig+0x1ec>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f023 0207 	bic.w	r2, r3, #7
 800565a:	4970      	ldr	r1, [pc, #448]	; (800581c <HAL_RCC_ClockConfig+0x1ec>)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	4313      	orrs	r3, r2
 8005660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005662:	4b6e      	ldr	r3, [pc, #440]	; (800581c <HAL_RCC_ClockConfig+0x1ec>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d001      	beq.n	8005674 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0cf      	b.n	8005814 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d010      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	4b66      	ldr	r3, [pc, #408]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800568c:	429a      	cmp	r2, r3
 800568e:	d908      	bls.n	80056a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005690:	4b63      	ldr	r3, [pc, #396]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4960      	ldr	r1, [pc, #384]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d04c      	beq.n	8005748 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d107      	bne.n	80056c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b6:	4b5a      	ldr	r3, [pc, #360]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d121      	bne.n	8005706 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e0a6      	b.n	8005814 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d107      	bne.n	80056de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056ce:	4b54      	ldr	r3, [pc, #336]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d115      	bne.n	8005706 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e09a      	b.n	8005814 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d107      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056e6:	4b4e      	ldr	r3, [pc, #312]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e08e      	b.n	8005814 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056f6:	4b4a      	ldr	r3, [pc, #296]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e086      	b.n	8005814 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005706:	4b46      	ldr	r3, [pc, #280]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f023 0203 	bic.w	r2, r3, #3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4943      	ldr	r1, [pc, #268]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 8005714:	4313      	orrs	r3, r2
 8005716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005718:	f7fb fe9c 	bl	8001454 <HAL_GetTick>
 800571c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571e:	e00a      	b.n	8005736 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005720:	f7fb fe98 	bl	8001454 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f241 3288 	movw	r2, #5000	; 0x1388
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e06e      	b.n	8005814 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005736:	4b3a      	ldr	r3, [pc, #232]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 020c 	and.w	r2, r3, #12
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	429a      	cmp	r2, r3
 8005746:	d1eb      	bne.n	8005720 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d010      	beq.n	8005776 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	4b31      	ldr	r3, [pc, #196]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005760:	429a      	cmp	r2, r3
 8005762:	d208      	bcs.n	8005776 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005764:	4b2e      	ldr	r3, [pc, #184]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	492b      	ldr	r1, [pc, #172]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 8005772:	4313      	orrs	r3, r2
 8005774:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005776:	4b29      	ldr	r3, [pc, #164]	; (800581c <HAL_RCC_ClockConfig+0x1ec>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d210      	bcs.n	80057a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005784:	4b25      	ldr	r3, [pc, #148]	; (800581c <HAL_RCC_ClockConfig+0x1ec>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f023 0207 	bic.w	r2, r3, #7
 800578c:	4923      	ldr	r1, [pc, #140]	; (800581c <HAL_RCC_ClockConfig+0x1ec>)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	4313      	orrs	r3, r2
 8005792:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005794:	4b21      	ldr	r3, [pc, #132]	; (800581c <HAL_RCC_ClockConfig+0x1ec>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d001      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e036      	b.n	8005814 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d008      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057b2:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	4918      	ldr	r1, [pc, #96]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d009      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057d0:	4b13      	ldr	r3, [pc, #76]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	4910      	ldr	r1, [pc, #64]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057e4:	f000 f824 	bl	8005830 <HAL_RCC_GetSysClockFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <HAL_RCC_ClockConfig+0x1f0>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	091b      	lsrs	r3, r3, #4
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	490b      	ldr	r1, [pc, #44]	; (8005824 <HAL_RCC_ClockConfig+0x1f4>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005800:	4a09      	ldr	r2, [pc, #36]	; (8005828 <HAL_RCC_ClockConfig+0x1f8>)
 8005802:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005804:	4b09      	ldr	r3, [pc, #36]	; (800582c <HAL_RCC_ClockConfig+0x1fc>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f7fb fdd3 	bl	80013b4 <HAL_InitTick>
 800580e:	4603      	mov	r3, r0
 8005810:	72fb      	strb	r3, [r7, #11]

  return status;
 8005812:	7afb      	ldrb	r3, [r7, #11]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40022000 	.word	0x40022000
 8005820:	40021000 	.word	0x40021000
 8005824:	08007208 	.word	0x08007208
 8005828:	20000008 	.word	0x20000008
 800582c:	2000000c 	.word	0x2000000c

08005830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005830:	b480      	push	{r7}
 8005832:	b089      	sub	sp, #36	; 0x24
 8005834:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	2300      	movs	r3, #0
 800583c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800583e:	4b3e      	ldr	r3, [pc, #248]	; (8005938 <HAL_RCC_GetSysClockFreq+0x108>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005848:	4b3b      	ldr	r3, [pc, #236]	; (8005938 <HAL_RCC_GetSysClockFreq+0x108>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0x34>
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	2b0c      	cmp	r3, #12
 800585c:	d121      	bne.n	80058a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d11e      	bne.n	80058a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005864:	4b34      	ldr	r3, [pc, #208]	; (8005938 <HAL_RCC_GetSysClockFreq+0x108>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d107      	bne.n	8005880 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005870:	4b31      	ldr	r3, [pc, #196]	; (8005938 <HAL_RCC_GetSysClockFreq+0x108>)
 8005872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005876:	0a1b      	lsrs	r3, r3, #8
 8005878:	f003 030f 	and.w	r3, r3, #15
 800587c:	61fb      	str	r3, [r7, #28]
 800587e:	e005      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005880:	4b2d      	ldr	r3, [pc, #180]	; (8005938 <HAL_RCC_GetSysClockFreq+0x108>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800588c:	4a2b      	ldr	r2, [pc, #172]	; (800593c <HAL_RCC_GetSysClockFreq+0x10c>)
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005894:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10d      	bne.n	80058b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058a0:	e00a      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d102      	bne.n	80058ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058a8:	4b25      	ldr	r3, [pc, #148]	; (8005940 <HAL_RCC_GetSysClockFreq+0x110>)
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	e004      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d101      	bne.n	80058b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058b4:	4b23      	ldr	r3, [pc, #140]	; (8005944 <HAL_RCC_GetSysClockFreq+0x114>)
 80058b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b0c      	cmp	r3, #12
 80058bc:	d134      	bne.n	8005928 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058be:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <HAL_RCC_GetSysClockFreq+0x108>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d003      	beq.n	80058d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d003      	beq.n	80058dc <HAL_RCC_GetSysClockFreq+0xac>
 80058d4:	e005      	b.n	80058e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058d6:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <HAL_RCC_GetSysClockFreq+0x110>)
 80058d8:	617b      	str	r3, [r7, #20]
      break;
 80058da:	e005      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80058dc:	4b19      	ldr	r3, [pc, #100]	; (8005944 <HAL_RCC_GetSysClockFreq+0x114>)
 80058de:	617b      	str	r3, [r7, #20]
      break;
 80058e0:	e002      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	617b      	str	r3, [r7, #20]
      break;
 80058e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058e8:	4b13      	ldr	r3, [pc, #76]	; (8005938 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	3301      	adds	r3, #1
 80058f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <HAL_RCC_GetSysClockFreq+0x108>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	fb03 f202 	mul.w	r2, r3, r2
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	fbb2 f3f3 	udiv	r3, r2, r3
 800590c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <HAL_RCC_GetSysClockFreq+0x108>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	0e5b      	lsrs	r3, r3, #25
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	3301      	adds	r3, #1
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	fbb2 f3f3 	udiv	r3, r2, r3
 8005926:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005928:	69bb      	ldr	r3, [r7, #24]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3724      	adds	r7, #36	; 0x24
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	40021000 	.word	0x40021000
 800593c:	08007218 	.word	0x08007218
 8005940:	00f42400 	.word	0x00f42400
 8005944:	007a1200 	.word	0x007a1200

08005948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005950:	2300      	movs	r3, #0
 8005952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005954:	4b2a      	ldr	r3, [pc, #168]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005960:	f7ff f9ee 	bl	8004d40 <HAL_PWREx_GetVoltageRange>
 8005964:	6178      	str	r0, [r7, #20]
 8005966:	e014      	b.n	8005992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005968:	4b25      	ldr	r3, [pc, #148]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800596a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596c:	4a24      	ldr	r2, [pc, #144]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800596e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005972:	6593      	str	r3, [r2, #88]	; 0x58
 8005974:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005980:	f7ff f9de 	bl	8004d40 <HAL_PWREx_GetVoltageRange>
 8005984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005986:	4b1e      	ldr	r3, [pc, #120]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598a:	4a1d      	ldr	r2, [pc, #116]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800598c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005998:	d10b      	bne.n	80059b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b80      	cmp	r3, #128	; 0x80
 800599e:	d919      	bls.n	80059d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2ba0      	cmp	r3, #160	; 0xa0
 80059a4:	d902      	bls.n	80059ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059a6:	2302      	movs	r3, #2
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	e013      	b.n	80059d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059ac:	2301      	movs	r3, #1
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	e010      	b.n	80059d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b80      	cmp	r3, #128	; 0x80
 80059b6:	d902      	bls.n	80059be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80059b8:	2303      	movs	r3, #3
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	e00a      	b.n	80059d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b80      	cmp	r3, #128	; 0x80
 80059c2:	d102      	bne.n	80059ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059c4:	2302      	movs	r3, #2
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	e004      	b.n	80059d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b70      	cmp	r3, #112	; 0x70
 80059ce:	d101      	bne.n	80059d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059d0:	2301      	movs	r3, #1
 80059d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f023 0207 	bic.w	r2, r3, #7
 80059dc:	4909      	ldr	r1, [pc, #36]	; (8005a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80059e4:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d001      	beq.n	80059f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40021000 	.word	0x40021000
 8005a04:	40022000 	.word	0x40022000

08005a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a10:	2300      	movs	r3, #0
 8005a12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a14:	2300      	movs	r3, #0
 8005a16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d031      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a2c:	d01a      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005a2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a32:	d814      	bhi.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d009      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a3c:	d10f      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005a3e:	4b5d      	ldr	r3, [pc, #372]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	4a5c      	ldr	r2, [pc, #368]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a4a:	e00c      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	2100      	movs	r1, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 f9f0 	bl	8005e38 <RCCEx_PLLSAI1_Config>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a5c:	e003      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	74fb      	strb	r3, [r7, #19]
      break;
 8005a62:	e000      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a66:	7cfb      	ldrb	r3, [r7, #19]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10b      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a6c:	4b51      	ldr	r3, [pc, #324]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7a:	494e      	ldr	r1, [pc, #312]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a82:	e001      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 809e 	beq.w	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a96:	2300      	movs	r3, #0
 8005a98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a9a:	4b46      	ldr	r3, [pc, #280]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00d      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ab0:	4b40      	ldr	r3, [pc, #256]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab4:	4a3f      	ldr	r2, [pc, #252]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aba:	6593      	str	r3, [r2, #88]	; 0x58
 8005abc:	4b3d      	ldr	r3, [pc, #244]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005acc:	4b3a      	ldr	r3, [pc, #232]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a39      	ldr	r2, [pc, #228]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ad8:	f7fb fcbc 	bl	8001454 <HAL_GetTick>
 8005adc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ade:	e009      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae0:	f7fb fcb8 	bl	8001454 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d902      	bls.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	74fb      	strb	r3, [r7, #19]
        break;
 8005af2:	e005      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005af4:	4b30      	ldr	r3, [pc, #192]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0ef      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005b00:	7cfb      	ldrb	r3, [r7, #19]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d15a      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b06:	4b2b      	ldr	r3, [pc, #172]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01e      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d019      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b22:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b2e:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b34:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b3e:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b44:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b4e:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d016      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7fb fc78 	bl	8001454 <HAL_GetTick>
 8005b64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b66:	e00b      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b68:	f7fb fc74 	bl	8001454 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d902      	bls.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	74fb      	strb	r3, [r7, #19]
            break;
 8005b7e:	e006      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0ec      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005b8e:	7cfb      	ldrb	r3, [r7, #19]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10b      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba2:	4904      	ldr	r1, [pc, #16]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005baa:	e009      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bac:	7cfb      	ldrb	r3, [r7, #19]
 8005bae:	74bb      	strb	r3, [r7, #18]
 8005bb0:	e006      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005bb2:	bf00      	nop
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbc:	7cfb      	ldrb	r3, [r7, #19]
 8005bbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bc0:	7c7b      	ldrb	r3, [r7, #17]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d105      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc6:	4b9b      	ldr	r3, [pc, #620]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bca:	4a9a      	ldr	r2, [pc, #616]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bde:	4b95      	ldr	r3, [pc, #596]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be4:	f023 0203 	bic.w	r2, r3, #3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	4991      	ldr	r1, [pc, #580]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c00:	4b8c      	ldr	r3, [pc, #560]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c06:	f023 020c 	bic.w	r2, r3, #12
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	4989      	ldr	r1, [pc, #548]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c22:	4b84      	ldr	r3, [pc, #528]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	4980      	ldr	r1, [pc, #512]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c44:	4b7b      	ldr	r3, [pc, #492]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	4978      	ldr	r1, [pc, #480]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c66:	4b73      	ldr	r3, [pc, #460]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c74:	496f      	ldr	r1, [pc, #444]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c88:	4b6a      	ldr	r3, [pc, #424]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	4967      	ldr	r1, [pc, #412]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005caa:	4b62      	ldr	r3, [pc, #392]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb8:	495e      	ldr	r1, [pc, #376]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ccc:	4b59      	ldr	r3, [pc, #356]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	4956      	ldr	r1, [pc, #344]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cee:	4b51      	ldr	r3, [pc, #324]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	494d      	ldr	r1, [pc, #308]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d028      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d10:	4b48      	ldr	r3, [pc, #288]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d1e:	4945      	ldr	r1, [pc, #276]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d2e:	d106      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d30:	4b40      	ldr	r3, [pc, #256]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	4a3f      	ldr	r2, [pc, #252]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d3a:	60d3      	str	r3, [r2, #12]
 8005d3c:	e011      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d46:	d10c      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 f872 	bl	8005e38 <RCCEx_PLLSAI1_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8005d5e:	7cfb      	ldrb	r3, [r7, #19]
 8005d60:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d028      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d6e:	4b31      	ldr	r3, [pc, #196]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7c:	492d      	ldr	r1, [pc, #180]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d8c:	d106      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d8e:	4b29      	ldr	r3, [pc, #164]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	4a28      	ldr	r2, [pc, #160]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d98:	60d3      	str	r3, [r2, #12]
 8005d9a:	e011      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005da4:	d10c      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3304      	adds	r3, #4
 8005daa:	2101      	movs	r1, #1
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 f843 	bl	8005e38 <RCCEx_PLLSAI1_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005db6:	7cfb      	ldrb	r3, [r7, #19]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005dbc:	7cfb      	ldrb	r3, [r7, #19]
 8005dbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01c      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dda:	4916      	ldr	r1, [pc, #88]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dea:	d10c      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3304      	adds	r3, #4
 8005df0:	2102      	movs	r1, #2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 f820 	bl	8005e38 <RCCEx_PLLSAI1_Config>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dfc:	7cfb      	ldrb	r3, [r7, #19]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005e02:	7cfb      	ldrb	r3, [r7, #19]
 8005e04:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e12:	4b08      	ldr	r3, [pc, #32]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e18:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e20:	4904      	ldr	r1, [pc, #16]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e28:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40021000 	.word	0x40021000

08005e38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e46:	4b74      	ldr	r3, [pc, #464]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d018      	beq.n	8005e84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e52:	4b71      	ldr	r3, [pc, #452]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0203 	and.w	r2, r3, #3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d10d      	bne.n	8005e7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
       ||
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e6a:	4b6b      	ldr	r3, [pc, #428]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	091b      	lsrs	r3, r3, #4
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
       ||
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d047      	beq.n	8005f0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	73fb      	strb	r3, [r7, #15]
 8005e82:	e044      	b.n	8005f0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d018      	beq.n	8005ebe <RCCEx_PLLSAI1_Config+0x86>
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d825      	bhi.n	8005edc <RCCEx_PLLSAI1_Config+0xa4>
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d002      	beq.n	8005e9a <RCCEx_PLLSAI1_Config+0x62>
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d009      	beq.n	8005eac <RCCEx_PLLSAI1_Config+0x74>
 8005e98:	e020      	b.n	8005edc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e9a:	4b5f      	ldr	r3, [pc, #380]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d11d      	bne.n	8005ee2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eaa:	e01a      	b.n	8005ee2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005eac:	4b5a      	ldr	r3, [pc, #360]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d116      	bne.n	8005ee6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ebc:	e013      	b.n	8005ee6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ebe:	4b56      	ldr	r3, [pc, #344]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10f      	bne.n	8005eea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005eca:	4b53      	ldr	r3, [pc, #332]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005eda:	e006      	b.n	8005eea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee0:	e004      	b.n	8005eec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ee2:	bf00      	nop
 8005ee4:	e002      	b.n	8005eec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ee6:	bf00      	nop
 8005ee8:	e000      	b.n	8005eec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005eea:	bf00      	nop
    }

    if(status == HAL_OK)
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10d      	bne.n	8005f0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ef2:	4b49      	ldr	r3, [pc, #292]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6819      	ldr	r1, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	430b      	orrs	r3, r1
 8005f08:	4943      	ldr	r1, [pc, #268]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d17c      	bne.n	800600e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f14:	4b40      	ldr	r3, [pc, #256]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a3f      	ldr	r2, [pc, #252]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f20:	f7fb fa98 	bl	8001454 <HAL_GetTick>
 8005f24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f26:	e009      	b.n	8005f3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f28:	f7fb fa94 	bl	8001454 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d902      	bls.n	8005f3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	73fb      	strb	r3, [r7, #15]
        break;
 8005f3a:	e005      	b.n	8005f48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f3c:	4b36      	ldr	r3, [pc, #216]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1ef      	bne.n	8005f28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d15f      	bne.n	800600e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d110      	bne.n	8005f76 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f54:	4b30      	ldr	r3, [pc, #192]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005f5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6892      	ldr	r2, [r2, #8]
 8005f64:	0211      	lsls	r1, r2, #8
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68d2      	ldr	r2, [r2, #12]
 8005f6a:	06d2      	lsls	r2, r2, #27
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	492a      	ldr	r1, [pc, #168]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	610b      	str	r3, [r1, #16]
 8005f74:	e027      	b.n	8005fc6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d112      	bne.n	8005fa2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f7c:	4b26      	ldr	r3, [pc, #152]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005f84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6892      	ldr	r2, [r2, #8]
 8005f8c:	0211      	lsls	r1, r2, #8
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6912      	ldr	r2, [r2, #16]
 8005f92:	0852      	lsrs	r2, r2, #1
 8005f94:	3a01      	subs	r2, #1
 8005f96:	0552      	lsls	r2, r2, #21
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	491f      	ldr	r1, [pc, #124]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	610b      	str	r3, [r1, #16]
 8005fa0:	e011      	b.n	8005fc6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fa2:	4b1d      	ldr	r3, [pc, #116]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005faa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	6892      	ldr	r2, [r2, #8]
 8005fb2:	0211      	lsls	r1, r2, #8
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6952      	ldr	r2, [r2, #20]
 8005fb8:	0852      	lsrs	r2, r2, #1
 8005fba:	3a01      	subs	r2, #1
 8005fbc:	0652      	lsls	r2, r2, #25
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	4915      	ldr	r1, [pc, #84]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fc6:	4b14      	ldr	r3, [pc, #80]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a13      	ldr	r2, [pc, #76]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fd0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd2:	f7fb fa3f 	bl	8001454 <HAL_GetTick>
 8005fd6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fd8:	e009      	b.n	8005fee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fda:	f7fb fa3b 	bl	8001454 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d902      	bls.n	8005fee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	73fb      	strb	r3, [r7, #15]
          break;
 8005fec:	e005      	b.n	8005ffa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0ef      	beq.n	8005fda <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	4903      	ldr	r1, [pc, #12]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e0>)
 800600a:	4313      	orrs	r3, r2
 800600c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40021000 	.word	0x40021000

0800601c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e049      	b.n	80060c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fb f8a2 	bl	800118c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3304      	adds	r3, #4
 8006058:	4619      	mov	r1, r3
 800605a:	4610      	mov	r0, r2
 800605c:	f000 fb8a 	bl	8006774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b082      	sub	sp, #8
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e049      	b.n	8006170 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d106      	bne.n	80060f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7fb f87f 	bl	80011f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3304      	adds	r3, #4
 8006106:	4619      	mov	r1, r3
 8006108:	4610      	mov	r0, r2
 800610a:	f000 fb33 	bl	8006774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <HAL_TIM_PWM_Start+0x24>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b01      	cmp	r3, #1
 8006192:	bf14      	ite	ne
 8006194:	2301      	movne	r3, #1
 8006196:	2300      	moveq	r3, #0
 8006198:	b2db      	uxtb	r3, r3
 800619a:	e03c      	b.n	8006216 <HAL_TIM_PWM_Start+0x9e>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d109      	bne.n	80061b6 <HAL_TIM_PWM_Start+0x3e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	bf14      	ite	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	2300      	moveq	r3, #0
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	e02f      	b.n	8006216 <HAL_TIM_PWM_Start+0x9e>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d109      	bne.n	80061d0 <HAL_TIM_PWM_Start+0x58>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	bf14      	ite	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	2300      	moveq	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	e022      	b.n	8006216 <HAL_TIM_PWM_Start+0x9e>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b0c      	cmp	r3, #12
 80061d4:	d109      	bne.n	80061ea <HAL_TIM_PWM_Start+0x72>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	bf14      	ite	ne
 80061e2:	2301      	movne	r3, #1
 80061e4:	2300      	moveq	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	e015      	b.n	8006216 <HAL_TIM_PWM_Start+0x9e>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d109      	bne.n	8006204 <HAL_TIM_PWM_Start+0x8c>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	e008      	b.n	8006216 <HAL_TIM_PWM_Start+0x9e>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	bf14      	ite	ne
 8006210:	2301      	movne	r3, #1
 8006212:	2300      	moveq	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e07e      	b.n	800631c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d104      	bne.n	800622e <HAL_TIM_PWM_Start+0xb6>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800622c:	e023      	b.n	8006276 <HAL_TIM_PWM_Start+0xfe>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b04      	cmp	r3, #4
 8006232:	d104      	bne.n	800623e <HAL_TIM_PWM_Start+0xc6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800623c:	e01b      	b.n	8006276 <HAL_TIM_PWM_Start+0xfe>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b08      	cmp	r3, #8
 8006242:	d104      	bne.n	800624e <HAL_TIM_PWM_Start+0xd6>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800624c:	e013      	b.n	8006276 <HAL_TIM_PWM_Start+0xfe>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b0c      	cmp	r3, #12
 8006252:	d104      	bne.n	800625e <HAL_TIM_PWM_Start+0xe6>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800625c:	e00b      	b.n	8006276 <HAL_TIM_PWM_Start+0xfe>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b10      	cmp	r3, #16
 8006262:	d104      	bne.n	800626e <HAL_TIM_PWM_Start+0xf6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800626c:	e003      	b.n	8006276 <HAL_TIM_PWM_Start+0xfe>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2201      	movs	r2, #1
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fe87 	bl	8006f92 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a26      	ldr	r2, [pc, #152]	; (8006324 <HAL_TIM_PWM_Start+0x1ac>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x12a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a25      	ldr	r2, [pc, #148]	; (8006328 <HAL_TIM_PWM_Start+0x1b0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x12a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a23      	ldr	r2, [pc, #140]	; (800632c <HAL_TIM_PWM_Start+0x1b4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d101      	bne.n	80062a6 <HAL_TIM_PWM_Start+0x12e>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <HAL_TIM_PWM_Start+0x130>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a18      	ldr	r2, [pc, #96]	; (8006324 <HAL_TIM_PWM_Start+0x1ac>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d009      	beq.n	80062da <HAL_TIM_PWM_Start+0x162>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ce:	d004      	beq.n	80062da <HAL_TIM_PWM_Start+0x162>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a14      	ldr	r2, [pc, #80]	; (8006328 <HAL_TIM_PWM_Start+0x1b0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d115      	bne.n	8006306 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	4b13      	ldr	r3, [pc, #76]	; (8006330 <HAL_TIM_PWM_Start+0x1b8>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b06      	cmp	r3, #6
 80062ea:	d015      	beq.n	8006318 <HAL_TIM_PWM_Start+0x1a0>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f2:	d011      	beq.n	8006318 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006304:	e008      	b.n	8006318 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0201 	orr.w	r2, r2, #1
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	e000      	b.n	800631a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006318:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40014000 	.word	0x40014000
 800632c:	40014400 	.word	0x40014400
 8006330:	00010007 	.word	0x00010007

08006334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800634e:	2302      	movs	r3, #2
 8006350:	e0ff      	b.n	8006552 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b14      	cmp	r3, #20
 800635e:	f200 80f0 	bhi.w	8006542 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	080063bd 	.word	0x080063bd
 800636c:	08006543 	.word	0x08006543
 8006370:	08006543 	.word	0x08006543
 8006374:	08006543 	.word	0x08006543
 8006378:	080063fd 	.word	0x080063fd
 800637c:	08006543 	.word	0x08006543
 8006380:	08006543 	.word	0x08006543
 8006384:	08006543 	.word	0x08006543
 8006388:	0800643f 	.word	0x0800643f
 800638c:	08006543 	.word	0x08006543
 8006390:	08006543 	.word	0x08006543
 8006394:	08006543 	.word	0x08006543
 8006398:	0800647f 	.word	0x0800647f
 800639c:	08006543 	.word	0x08006543
 80063a0:	08006543 	.word	0x08006543
 80063a4:	08006543 	.word	0x08006543
 80063a8:	080064c1 	.word	0x080064c1
 80063ac:	08006543 	.word	0x08006543
 80063b0:	08006543 	.word	0x08006543
 80063b4:	08006543 	.word	0x08006543
 80063b8:	08006501 	.word	0x08006501
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fa3a 	bl	800683c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0208 	orr.w	r2, r2, #8
 80063d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0204 	bic.w	r2, r2, #4
 80063e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6999      	ldr	r1, [r3, #24]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	619a      	str	r2, [r3, #24]
      break;
 80063fa:	e0a5      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fa96 	bl	8006934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6999      	ldr	r1, [r3, #24]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	021a      	lsls	r2, r3, #8
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	619a      	str	r2, [r3, #24]
      break;
 800643c:	e084      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	4618      	mov	r0, r3
 8006446:	f000 faef 	bl	8006a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0208 	orr.w	r2, r2, #8
 8006458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0204 	bic.w	r2, r2, #4
 8006468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69d9      	ldr	r1, [r3, #28]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	61da      	str	r2, [r3, #28]
      break;
 800647c:	e064      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fb47 	bl	8006b18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69d9      	ldr	r1, [r3, #28]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	021a      	lsls	r2, r3, #8
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	61da      	str	r2, [r3, #28]
      break;
 80064be:	e043      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fb84 	bl	8006bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0208 	orr.w	r2, r2, #8
 80064da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0204 	bic.w	r2, r2, #4
 80064ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064fe:	e023      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fbbc 	bl	8006c84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800651a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	021a      	lsls	r2, r3, #8
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006540:	e002      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	75fb      	strb	r3, [r7, #23]
      break;
 8006546:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop

0800655c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_TIM_ConfigClockSource+0x1c>
 8006574:	2302      	movs	r3, #2
 8006576:	e0b6      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x18a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800659a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b4:	d03e      	beq.n	8006634 <HAL_TIM_ConfigClockSource+0xd8>
 80065b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ba:	f200 8087 	bhi.w	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c2:	f000 8086 	beq.w	80066d2 <HAL_TIM_ConfigClockSource+0x176>
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ca:	d87f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065cc:	2b70      	cmp	r3, #112	; 0x70
 80065ce:	d01a      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0xaa>
 80065d0:	2b70      	cmp	r3, #112	; 0x70
 80065d2:	d87b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065d4:	2b60      	cmp	r3, #96	; 0x60
 80065d6:	d050      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x11e>
 80065d8:	2b60      	cmp	r3, #96	; 0x60
 80065da:	d877      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065dc:	2b50      	cmp	r3, #80	; 0x50
 80065de:	d03c      	beq.n	800665a <HAL_TIM_ConfigClockSource+0xfe>
 80065e0:	2b50      	cmp	r3, #80	; 0x50
 80065e2:	d873      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d058      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x13e>
 80065e8:	2b40      	cmp	r3, #64	; 0x40
 80065ea:	d86f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065ec:	2b30      	cmp	r3, #48	; 0x30
 80065ee:	d064      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15e>
 80065f0:	2b30      	cmp	r3, #48	; 0x30
 80065f2:	d86b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d060      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15e>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d867      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d05c      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15e>
 8006600:	2b10      	cmp	r3, #16
 8006602:	d05a      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15e>
 8006604:	e062      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006616:	f000 fc9c 	bl	8006f52 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	609a      	str	r2, [r3, #8]
      break;
 8006632:	e04f      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006644:	f000 fc85 	bl	8006f52 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006656:	609a      	str	r2, [r3, #8]
      break;
 8006658:	e03c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006666:	461a      	mov	r2, r3
 8006668:	f000 fbf9 	bl	8006e5e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2150      	movs	r1, #80	; 0x50
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fc52 	bl	8006f1c <TIM_ITRx_SetConfig>
      break;
 8006678:	e02c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006686:	461a      	mov	r2, r3
 8006688:	f000 fc18 	bl	8006ebc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2160      	movs	r1, #96	; 0x60
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fc42 	bl	8006f1c <TIM_ITRx_SetConfig>
      break;
 8006698:	e01c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a6:	461a      	mov	r2, r3
 80066a8:	f000 fbd9 	bl	8006e5e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2140      	movs	r1, #64	; 0x40
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fc32 	bl	8006f1c <TIM_ITRx_SetConfig>
      break;
 80066b8:	e00c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f000 fc29 	bl	8006f1c <TIM_ITRx_SetConfig>
      break;
 80066ca:	e003      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
      break;
 80066d0:	e000      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80066d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006702:	2302      	movs	r3, #2
 8006704:	e031      	b.n	800676a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fb0d 	bl	8006d38 <TIM_SlaveTimer_SetConfig>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d009      	beq.n	8006738 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e018      	b.n	800676a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006746:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006756:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a2a      	ldr	r2, [pc, #168]	; (8006830 <TIM_Base_SetConfig+0xbc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d003      	beq.n	8006794 <TIM_Base_SetConfig+0x20>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006792:	d108      	bne.n	80067a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a21      	ldr	r2, [pc, #132]	; (8006830 <TIM_Base_SetConfig+0xbc>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00b      	beq.n	80067c6 <TIM_Base_SetConfig+0x52>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b4:	d007      	beq.n	80067c6 <TIM_Base_SetConfig+0x52>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <TIM_Base_SetConfig+0xc0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d003      	beq.n	80067c6 <TIM_Base_SetConfig+0x52>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a1d      	ldr	r2, [pc, #116]	; (8006838 <TIM_Base_SetConfig+0xc4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d108      	bne.n	80067d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a0c      	ldr	r2, [pc, #48]	; (8006830 <TIM_Base_SetConfig+0xbc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d007      	beq.n	8006814 <TIM_Base_SetConfig+0xa0>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a0b      	ldr	r2, [pc, #44]	; (8006834 <TIM_Base_SetConfig+0xc0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d003      	beq.n	8006814 <TIM_Base_SetConfig+0xa0>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <TIM_Base_SetConfig+0xc4>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d103      	bne.n	800681c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	615a      	str	r2, [r3, #20]
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40014000 	.word	0x40014000
 8006838:	40014400 	.word	0x40014400

0800683c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	f023 0201 	bic.w	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800686a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0303 	bic.w	r3, r3, #3
 8006876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f023 0302 	bic.w	r3, r3, #2
 8006888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a24      	ldr	r2, [pc, #144]	; (8006928 <TIM_OC1_SetConfig+0xec>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d007      	beq.n	80068ac <TIM_OC1_SetConfig+0x70>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a23      	ldr	r2, [pc, #140]	; (800692c <TIM_OC1_SetConfig+0xf0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_OC1_SetConfig+0x70>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a22      	ldr	r2, [pc, #136]	; (8006930 <TIM_OC1_SetConfig+0xf4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d10c      	bne.n	80068c6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0308 	bic.w	r3, r3, #8
 80068b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f023 0304 	bic.w	r3, r3, #4
 80068c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a17      	ldr	r2, [pc, #92]	; (8006928 <TIM_OC1_SetConfig+0xec>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d007      	beq.n	80068de <TIM_OC1_SetConfig+0xa2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a16      	ldr	r2, [pc, #88]	; (800692c <TIM_OC1_SetConfig+0xf0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d003      	beq.n	80068de <TIM_OC1_SetConfig+0xa2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a15      	ldr	r2, [pc, #84]	; (8006930 <TIM_OC1_SetConfig+0xf4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d111      	bne.n	8006902 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	621a      	str	r2, [r3, #32]
}
 800691c:	bf00      	nop
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40014000 	.word	0x40014000
 8006930:	40014400 	.word	0x40014400

08006934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	f023 0210 	bic.w	r2, r3, #16
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 0320 	bic.w	r3, r3, #32
 8006982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a22      	ldr	r2, [pc, #136]	; (8006a1c <TIM_OC2_SetConfig+0xe8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d10d      	bne.n	80069b4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800699e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a19      	ldr	r2, [pc, #100]	; (8006a1c <TIM_OC2_SetConfig+0xe8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d007      	beq.n	80069cc <TIM_OC2_SetConfig+0x98>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a18      	ldr	r2, [pc, #96]	; (8006a20 <TIM_OC2_SetConfig+0xec>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <TIM_OC2_SetConfig+0x98>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a17      	ldr	r2, [pc, #92]	; (8006a24 <TIM_OC2_SetConfig+0xf0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d113      	bne.n	80069f4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	621a      	str	r2, [r3, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	371c      	adds	r7, #28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40014400 	.word	0x40014400

08006a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0303 	bic.w	r3, r3, #3
 8006a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a21      	ldr	r2, [pc, #132]	; (8006b0c <TIM_OC3_SetConfig+0xe4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d10d      	bne.n	8006aa6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a18      	ldr	r2, [pc, #96]	; (8006b0c <TIM_OC3_SetConfig+0xe4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d007      	beq.n	8006abe <TIM_OC3_SetConfig+0x96>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a17      	ldr	r2, [pc, #92]	; (8006b10 <TIM_OC3_SetConfig+0xe8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d003      	beq.n	8006abe <TIM_OC3_SetConfig+0x96>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a16      	ldr	r2, [pc, #88]	; (8006b14 <TIM_OC3_SetConfig+0xec>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d113      	bne.n	8006ae6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	621a      	str	r2, [r3, #32]
}
 8006b00:	bf00      	nop
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40014000 	.word	0x40014000
 8006b14:	40014400 	.word	0x40014400

08006b18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	031b      	lsls	r3, r3, #12
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <TIM_OC4_SetConfig+0xb0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d007      	beq.n	8006b8c <TIM_OC4_SetConfig+0x74>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a13      	ldr	r2, [pc, #76]	; (8006bcc <TIM_OC4_SetConfig+0xb4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d003      	beq.n	8006b8c <TIM_OC4_SetConfig+0x74>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a12      	ldr	r2, [pc, #72]	; (8006bd0 <TIM_OC4_SetConfig+0xb8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d109      	bne.n	8006ba0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	019b      	lsls	r3, r3, #6
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40012c00 	.word	0x40012c00
 8006bcc:	40014000 	.word	0x40014000
 8006bd0:	40014400 	.word	0x40014400

08006bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	041b      	lsls	r3, r3, #16
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a13      	ldr	r2, [pc, #76]	; (8006c78 <TIM_OC5_SetConfig+0xa4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <TIM_OC5_SetConfig+0x6a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a12      	ldr	r2, [pc, #72]	; (8006c7c <TIM_OC5_SetConfig+0xa8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_OC5_SetConfig+0x6a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a11      	ldr	r2, [pc, #68]	; (8006c80 <TIM_OC5_SetConfig+0xac>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d109      	bne.n	8006c52 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	621a      	str	r2, [r3, #32]
}
 8006c6c:	bf00      	nop
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	40012c00 	.word	0x40012c00
 8006c7c:	40014000 	.word	0x40014000
 8006c80:	40014400 	.word	0x40014400

08006c84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	021b      	lsls	r3, r3, #8
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	051b      	lsls	r3, r3, #20
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a14      	ldr	r2, [pc, #80]	; (8006d2c <TIM_OC6_SetConfig+0xa8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d007      	beq.n	8006cf0 <TIM_OC6_SetConfig+0x6c>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a13      	ldr	r2, [pc, #76]	; (8006d30 <TIM_OC6_SetConfig+0xac>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_OC6_SetConfig+0x6c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a12      	ldr	r2, [pc, #72]	; (8006d34 <TIM_OC6_SetConfig+0xb0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d109      	bne.n	8006d04 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	029b      	lsls	r3, r3, #10
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40012c00 	.word	0x40012c00
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40014400 	.word	0x40014400

08006d38 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d54:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d66:	f023 0307 	bic.w	r3, r3, #7
 8006d6a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b70      	cmp	r3, #112	; 0x70
 8006d84:	d01a      	beq.n	8006dbc <TIM_SlaveTimer_SetConfig+0x84>
 8006d86:	2b70      	cmp	r3, #112	; 0x70
 8006d88:	d860      	bhi.n	8006e4c <TIM_SlaveTimer_SetConfig+0x114>
 8006d8a:	2b60      	cmp	r3, #96	; 0x60
 8006d8c:	d054      	beq.n	8006e38 <TIM_SlaveTimer_SetConfig+0x100>
 8006d8e:	2b60      	cmp	r3, #96	; 0x60
 8006d90:	d85c      	bhi.n	8006e4c <TIM_SlaveTimer_SetConfig+0x114>
 8006d92:	2b50      	cmp	r3, #80	; 0x50
 8006d94:	d046      	beq.n	8006e24 <TIM_SlaveTimer_SetConfig+0xec>
 8006d96:	2b50      	cmp	r3, #80	; 0x50
 8006d98:	d858      	bhi.n	8006e4c <TIM_SlaveTimer_SetConfig+0x114>
 8006d9a:	2b40      	cmp	r3, #64	; 0x40
 8006d9c:	d019      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x9a>
 8006d9e:	2b40      	cmp	r3, #64	; 0x40
 8006da0:	d854      	bhi.n	8006e4c <TIM_SlaveTimer_SetConfig+0x114>
 8006da2:	2b30      	cmp	r3, #48	; 0x30
 8006da4:	d055      	beq.n	8006e52 <TIM_SlaveTimer_SetConfig+0x11a>
 8006da6:	2b30      	cmp	r3, #48	; 0x30
 8006da8:	d850      	bhi.n	8006e4c <TIM_SlaveTimer_SetConfig+0x114>
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d051      	beq.n	8006e52 <TIM_SlaveTimer_SetConfig+0x11a>
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	d84c      	bhi.n	8006e4c <TIM_SlaveTimer_SetConfig+0x114>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d04d      	beq.n	8006e52 <TIM_SlaveTimer_SetConfig+0x11a>
 8006db6:	2b10      	cmp	r3, #16
 8006db8:	d04b      	beq.n	8006e52 <TIM_SlaveTimer_SetConfig+0x11a>
 8006dba:	e047      	b.n	8006e4c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006dcc:	f000 f8c1 	bl	8006f52 <TIM_ETR_SetConfig>
      break;
 8006dd0:	e040      	b.n	8006e54 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b05      	cmp	r3, #5
 8006dd8:	d101      	bne.n	8006dde <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e03b      	b.n	8006e56 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6a1a      	ldr	r2, [r3, #32]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0201 	bic.w	r2, r2, #1
 8006df4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e04:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	621a      	str	r2, [r3, #32]
      break;
 8006e22:	e017      	b.n	8006e54 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e30:	461a      	mov	r2, r3
 8006e32:	f000 f814 	bl	8006e5e <TIM_TI1_ConfigInputStage>
      break;
 8006e36:	e00d      	b.n	8006e54 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e44:	461a      	mov	r2, r3
 8006e46:	f000 f839 	bl	8006ebc <TIM_TI2_ConfigInputStage>
      break;
 8006e4a:	e003      	b.n	8006e54 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e50:	e000      	b.n	8006e54 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8006e52:	bf00      	nop
  }

  return status;
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b087      	sub	sp, #28
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	f023 0201 	bic.w	r2, r3, #1
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f023 030a 	bic.w	r3, r3, #10
 8006e9a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	621a      	str	r2, [r3, #32]
}
 8006eb0:	bf00      	nop
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	f023 0210 	bic.w	r2, r3, #16
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	031b      	lsls	r3, r3, #12
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	621a      	str	r2, [r3, #32]
}
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	f043 0307 	orr.w	r3, r3, #7
 8006f3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	609a      	str	r2, [r3, #8]
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b087      	sub	sp, #28
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	60f8      	str	r0, [r7, #12]
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	607a      	str	r2, [r7, #4]
 8006f5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	021a      	lsls	r2, r3, #8
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	431a      	orrs	r2, r3
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	609a      	str	r2, [r3, #8]
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b087      	sub	sp, #28
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a1a      	ldr	r2, [r3, #32]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	43db      	mvns	r3, r3
 8006fb4:	401a      	ands	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a1a      	ldr	r2, [r3, #32]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	621a      	str	r2, [r3, #32]
}
 8006fd0:	bf00      	nop
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d101      	bne.n	8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	e04f      	b.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a21      	ldr	r2, [pc, #132]	; (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d108      	bne.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007024:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a14      	ldr	r2, [pc, #80]	; (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d009      	beq.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705c:	d004      	beq.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a10      	ldr	r2, [pc, #64]	; (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d10c      	bne.n	8007082 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800706e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	4313      	orrs	r3, r2
 8007078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40014000 	.word	0x40014000

080070a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e060      	b.n	8007186 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4313      	orrs	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	041b      	lsls	r3, r3, #16
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a14      	ldr	r2, [pc, #80]	; (8007194 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d115      	bne.n	8007174 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	051b      	lsls	r3, r3, #20
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40012c00 	.word	0x40012c00

08007198 <memset>:
 8007198:	4402      	add	r2, r0
 800719a:	4603      	mov	r3, r0
 800719c:	4293      	cmp	r3, r2
 800719e:	d100      	bne.n	80071a2 <memset+0xa>
 80071a0:	4770      	bx	lr
 80071a2:	f803 1b01 	strb.w	r1, [r3], #1
 80071a6:	e7f9      	b.n	800719c <memset+0x4>

080071a8 <__libc_init_array>:
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	4d0d      	ldr	r5, [pc, #52]	; (80071e0 <__libc_init_array+0x38>)
 80071ac:	4c0d      	ldr	r4, [pc, #52]	; (80071e4 <__libc_init_array+0x3c>)
 80071ae:	1b64      	subs	r4, r4, r5
 80071b0:	10a4      	asrs	r4, r4, #2
 80071b2:	2600      	movs	r6, #0
 80071b4:	42a6      	cmp	r6, r4
 80071b6:	d109      	bne.n	80071cc <__libc_init_array+0x24>
 80071b8:	4d0b      	ldr	r5, [pc, #44]	; (80071e8 <__libc_init_array+0x40>)
 80071ba:	4c0c      	ldr	r4, [pc, #48]	; (80071ec <__libc_init_array+0x44>)
 80071bc:	f000 f818 	bl	80071f0 <_init>
 80071c0:	1b64      	subs	r4, r4, r5
 80071c2:	10a4      	asrs	r4, r4, #2
 80071c4:	2600      	movs	r6, #0
 80071c6:	42a6      	cmp	r6, r4
 80071c8:	d105      	bne.n	80071d6 <__libc_init_array+0x2e>
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d0:	4798      	blx	r3
 80071d2:	3601      	adds	r6, #1
 80071d4:	e7ee      	b.n	80071b4 <__libc_init_array+0xc>
 80071d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071da:	4798      	blx	r3
 80071dc:	3601      	adds	r6, #1
 80071de:	e7f2      	b.n	80071c6 <__libc_init_array+0x1e>
 80071e0:	08007248 	.word	0x08007248
 80071e4:	08007248 	.word	0x08007248
 80071e8:	08007248 	.word	0x08007248
 80071ec:	0800724c 	.word	0x0800724c

080071f0 <_init>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr

080071fc <_fini>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr
